---
description: Key Configuration Files: This rule lists the main configuration files in the project and their purposes.
globs: 
alwaysApply: false
---
# Key Configuration Files

This rule lists the main configuration files in the project and their purposes.

## Build and Development Server

-   **Vite Configuration**: [vite.config.ts](mdc:vite.config.ts) is the main configuration file for Vite, used to define the build process, development server options, plugins, etc.
-   **PostCSS Configuration**: [postcss.config.cjs](mdc:postcss.config.cjs) is used to configure PostCSS plugins, usually in conjunction with Tailwind CSS.
-   **Tailwind CSS Configuration**: [tailwind.config.cjs](mdc:tailwind.config.cjs) is the configuration file for Tailwind CSS, used to customize themes, add plugins, etc.

## TypeScript Configuration

-   **Main TypeScript Configuration**: [tsconfig.json](mdc:tsconfig.json) defines the TypeScript compiler options and project files.
-   **Node Environment TypeScript Configuration**: [tsconfig.node.json](mdc:tsconfig.node.json) may be used for TypeScript configurations specific to the Node.js environment (e.g., the Vite configuration file itself).

## Package Management and Dependencies

-   **Project Metadata and Dependencies**: [package.json](mdc:package.json) contains project metadata (name, version, etc.), script commands, and a list of project dependencies.
-   **Dependency Locking**: [pnpm-lock.yaml](mdc:pnpm-lock.yaml) is generated by the pnpm package manager to lock the exact versions of dependencies, ensuring build consistency.

## Code Quality and Formatting

-   **ESLint Configuration**: [eslint.config.js](mdc:eslint.config.js) (or possibly `.eslintrc.js` / `.json`) is used to configure ESLint, a static code analysis tool for JavaScript and TypeScript, used to find problems and enforce coding standards.
-   **Prettier Configuration**: [prettier.config.js](mdc:.prettierrc) (or `.prettierrc`) and [.prettierignore](mdc:.prettierignore) are used to configure Prettier, a code formatting tool, to maintain code style consistency.

## Other Configurations

-   **Environment Variables**: [.env](mdc:.env) (usually in `.gitignore`) is used to store environment variables.
-   **Git Ignore File**: [.gitignore](mdc:.gitignore) specifies files and directories that the Git version control system should ignore.
-   **Husky Configuration**: The `.husky/` directory ([.husky/](mdc:.husky)) stores Husky's configuration, used to set up Git hooks (e.g., running linters before commits).
-   **Components.json**: [components.json](mdc:components.json) may be related to component configuration for UI libraries (like shadcn/ui).
