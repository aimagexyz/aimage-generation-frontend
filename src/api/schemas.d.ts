/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/health-check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health Check */
    get: operations['health_check_api_v1_health_check_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/admin/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Users */
    get: operations['list_users_api_v1_admin_users_get'];
    put?: never;
    /** Create User */
    post: operations['create_user_api_v1_admin_users_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/admin/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Projects */
    get: operations['list_projects_api_v1_admin_projects_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/admin/users/{user_id}/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get User Projects */
    get: operations['get_user_projects_api_v1_admin_users__user_id__projects_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/admin/users/{user_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete User
     * @description 删除用户（仅限管理员）
     */
    delete: operations['delete_user_api_v1_admin_users__user_id__delete'];
    options?: never;
    head?: never;
    /** Update User Role */
    patch: operations['update_user_role_api_v1_admin_users__user_id__patch'];
    trace?: never;
  };
  '/api/v1/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Auto Register User
     * @description Auto register user if not exists.
     */
    post: operations['auto_register_user_api_v1_users_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Current User */
    get: operations['retrieve_current_user_api_v1_users_me_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/{user_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve User */
    get: operations['retrieve_user_api_v1_users__user_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/me/preferences/liked-images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Liked Images
     * @description Get user's liked images with fresh presigned URLs
     */
    get: operations['get_liked_images_api_v1_users_me_preferences_liked_images_get'];
    put?: never;
    /**
     * Add Liked Image
     * @description Add image to liked list with source tracking
     */
    post: operations['add_liked_image_api_v1_users_me_preferences_liked_images_post'];
    /**
     * Remove Liked Image
     * @description Remove image from liked list
     */
    delete: operations['remove_liked_image_api_v1_users_me_preferences_liked_images_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/me/preferences/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Preferences
     * @description Get user preferences and settings (liked images available via separate endpoint)
     */
    get: operations['get_user_preferences_api_v1_users_me_preferences__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Projects */
    get: operations['list_projects_api_v1_projects_get'];
    put?: never;
    /** Create Project */
    post: operations['create_project_api_v1_projects_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Project */
    get: operations['get_project_api_v1_projects__project_id__get'];
    put?: never;
    post?: never;
    /** Delete Or Quit Project */
    delete: operations['delete_or_quit_project_api_v1_projects__project_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload Project Documents */
    post: operations['upload_project_documents_api_v1_projects__project_id__documents_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/documents/{document_id}/url': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Document Url */
    get: operations['get_document_url_api_v1_projects__project_id__documents__document_id__url_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/rpd-reference-images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Rpd Reference Image
     * @description Upload a reference image for RPD copyright detection
     */
    post: operations['upload_rpd_reference_image_api_v1_projects__project_id__rpd_reference_images_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/rpd-reference-images/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Rpd Reference Images Batch
     * @description Batch upload reference images for RPD copyright detection
     */
    post: operations['upload_rpd_reference_images_batch_api_v1_projects__project_id__rpd_reference_images_batch_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/priorities': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Task Priorities */
    get: operations['list_task_priorities_api_v1_tasks_priorities_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/statuses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Task Statuses */
    get: operations['list_task_statuses_api_v1_tasks_statuses_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Project Tasks */
    get: operations['list_project_tasks_api_v1_projects__project_id__tasks_get'];
    put?: never;
    /** Create Task */
    post: operations['create_task_api_v1_projects__project_id__tasks_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Task Status */
    patch: operations['update_task_status_api_v1_tasks__task_id__status_patch'];
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/priority': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Task Priority */
    patch: operations['update_task_priority_api_v1_tasks__task_id__priority_patch'];
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks-kanban-order': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Project Tasks Kanban Order */
    get: operations['list_project_tasks_kanban_order_api_v1_projects__project_id__tasks_kanban_order_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks-kanban-order/statuses/{status_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Or Update Project Tasks Kanban Order */
    post: operations['create_or_update_project_tasks_kanban_order_api_v1_projects__project_id__tasks_kanban_order_statuses__status_id__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Task */
    get: operations['get_task_api_v1_tasks__task_id__get'];
    /** Update Task Details */
    put: operations['update_task_details_api_v1_tasks__task_id__put'];
    post?: never;
    /**
     * Delete Task
     * @description Soft-deletes a task.
     *
     *     This operation marks a task as deleted but does not permanently remove it from the database.
     *     Associated subtasks and other data are preserved.
     */
    delete: operations['delete_task_api_v1_tasks__task_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/tags/{tag_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add Tag To Task
     * @description Add a tag to a task
     */
    post: operations['add_tag_to_task_api_v1_tasks__task_id__tags__tag_id__post'];
    /**
     * Remove Tag From Task
     * @description Remove a tag from a task
     */
    delete: operations['remove_tag_from_task_api_v1_tasks__task_id__tags__tag_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Task Tags
     * @description Get all tags for a task
     */
    get: operations['get_task_tags_api_v1_tasks__task_id__tags_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/subtasks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Task Subtasks */
    get: operations['list_task_subtasks_api_v1_tasks__task_id__subtasks_get'];
    put?: never;
    /**
     * Create Subtask
     * @description 创建子任务，可选地通过上传文件（图片或视频）
     */
    post: operations['create_subtask_api_v1_tasks__task_id__subtasks_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Subtask */
    get: operations['get_subtask_api_v1_subtasks__subtask_id__get'];
    /**
     * Update Subtask Details
     * @description Update subtask name and description
     */
    put: operations['update_subtask_details_api_v1_subtasks__subtask_id__put'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/characters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Subtask Characters
     * @description Update subtask associated characters (user manual selection)
     */
    patch: operations['update_subtask_characters_api_v1_subtasks__subtask_id__characters_patch'];
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/annotations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Subtask Annotations
     * @description List all annotations for a subtask.
     */
    get: operations['list_subtask_annotations_api_v1_subtasks__subtask_id__annotations_get'];
    put?: never;
    /**
     * Create Subtask Annotation
     * @description Create a new annotation for a subtask.
     */
    post: operations['create_subtask_annotation_api_v1_subtasks__subtask_id__annotations_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/annotations/{annotation_id}/solved': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Subtask Annotation Solved
     * @description Mark annotation as solved.
     */
    patch: operations['update_subtask_annotation_solved_api_v1_subtasks__subtask_id__annotations__annotation_id__solved_patch'];
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/annotations/{annotation_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Subtask Annotation
     * @description 删除子任务注释
     */
    delete: operations['delete_subtask_annotation_api_v1_subtasks__subtask_id__annotations__annotation_id__delete'];
    options?: never;
    head?: never;
    /**
     * Update Subtask Annotation
     * @description 修改子任务注释内容
     */
    patch: operations['update_subtask_annotation_api_v1_subtasks__subtask_id__annotations__annotation_id__patch'];
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Subtask Status
     * @description Update subtask status to either accepted or denied.
     */
    patch: operations['update_subtask_status_api_v1_subtasks__subtask_id__status_patch'];
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/export-pdf': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export Task Pdf
     * @description Export task and its subtasks as a PDF file.
     */
    get: operations['export_task_pdf_api_v1_tasks__task_id__export_pdf_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/content': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Subtask Content
     * @description Update subtask content and maintain version history.
     */
    patch: operations['update_subtask_content_api_v1_subtasks__subtask_id__content_patch'];
    trace?: never;
  };
  '/api/v1/tasks/upload-pptx': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Pptx
     * @description 上传并处理多个PPT文件，创建任务和子任务
     *
     *     Args:
     *         background_tasks (BackgroundTasks): FastAPI后台任务
     *         project_id (str): 项目ID
     *         files (List[UploadFile]): 上传的多个PPT文件
     *         current_user (User): 当前用户
     *
     *     Returns:
     *         JSONResponse: 包含批次ID和处理状态的响应
     */
    post: operations['upload_pptx_api_v1_tasks_upload_pptx_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/upload-status/{batch_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Upload Status
     * @description 获取文件上传和处理状态
     *
     *     Args:
     *         batch_id: 批次ID
     *         user: 当前用户
     *
     *     Returns:
     *         FileProcessingStatus: 处理状态信息
     */
    get: operations['get_upload_status_api_v1_tasks_upload_status__batch_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/export-pptx': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export Task Pptx
     * @description Export task as PPTX - works for both PPTX and image-based tasks
     */
    get: operations['export_task_pptx_api_v1_tasks__task_id__export_pptx_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/upload-document': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Document
     * @description 上传并保存docx, txt, excel等文件，为每个文件创建一个任务和对应的子任务。
     *
     *     Args:
     *         project_id (str): 项目ID
     *         files (List[UploadFile]): 上传的文件列表
     *         background_tasks (BackgroundTasks): FastAPI后台任务
     *         current_user (User): 当前用户
     *
     *     Returns:
     *         JSONResponse: 包含处理结果的响应
     */
    post: operations['upload_document_api_v1_tasks_upload_document_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks/create-from-image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 画像からタスクを作成
     * @description 画像をアップロードして新しいタスクと最初のサブタスクを作成します。
     */
    post: operations['create_task_from_uploaded_image_api_v1_projects__project_id__tasks_create_from_image_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks/create-from-video': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 動画からタスクを作成
     * @description 動画をアップロードして新しいタスクと最初のサブタスクを作成します。
     */
    post: operations['create_task_from_uploaded_video_api_v1_projects__project_id__tasks_create_from_video_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List All Project Tasks */
    get: operations['list_all_project_tasks_api_v1_projects__project_id__tasks_all_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/subtasks/{subtask_id}/copy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Copy Subtask
     * @description Copies a subtask to another task within the same project.
     */
    post: operations['copy_subtask_api_v1_subtasks__subtask_id__copy_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/suggested-review-sets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Suggest Review Sets For Task
     * @description For a given task, suggest review sets based on its tags and characters in subtasks.
     */
    get: operations['suggest_review_sets_for_task_api_v1_tasks__task_id__suggested_review_sets_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/tasks/navigation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Project Tasks For Navigation
     * @description 获取项目下用于导航的任务列表（轻量版）
     *
     *     Args:
     *         project_id: 项目ID
     *         sort_by: 排序字段 (tid, name, created_at)
     *         order: 排序方向 (asc, desc)
     *
     *     Returns:
     *         TaskNavigationResponse: 包含所有任务的导航数据
     */
    get: operations['list_project_tasks_for_navigation_api_v1_projects__project_id__tasks_navigation_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tasks/{task_id}/thumbnails': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Task Thumbnails
     * @description 获取任务的缩略图信息（前几个图片子任务）
     *
     *     Args:
     *         task_id: 任务ID
     *         limit: 返回的缩略图数量，默认3个
     */
    get: operations['get_task_thumbnails_api_v1_tasks__task_id__thumbnails_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Asset */
    get: operations['get_asset_api_v1_assets_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assets/images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Image
     * @description Upload an image file to S3 and return its URL.
     */
    post: operations['upload_image_api_v1_assets_images_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/assets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Assets */
    get: operations['list_assets_api_v1_projects__project_id__assets_get'];
    put?: never;
    /** Upload Asset From Google Drive */
    post: operations['upload_asset_from_google_drive_api_v1_projects__project_id__assets_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/projects/{project_id}/assets/process-pptx': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Process Pptx Assets
     * @description 处理项目中的PPT文件资源。
     *     立即返回assets的processing状态，然后在后台处理PPT文件。
     *
     *     Args:
     *         project_id: 项目ID
     *         asset_ids: 要处理的Asset ID列表
     *
     *     Returns:
     *         List[ProcessPPTXResponse]: 包含每个asset的ID和初始状态
     */
    post: operations['process_pptx_assets_api_v1_projects__project_id__assets_process_pptx_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assets/temp-images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Temp Image
     * @description 上传临时图片，设置2小时TTL
     */
    post: operations['upload_temp_image_api_v1_assets_temp_images_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assets/temp-sessions/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Cleanup Temp Session
     * @description 清理指定会话的所有临时文件
     */
    delete: operations['cleanup_temp_session_api_v1_assets_temp_sessions__session_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assets/temp-sessions/{session_id}/promote': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Promote Temp Images
     * @description 将临时图片提升为正式图片（移动到正式存储路径）
     */
    post: operations['promote_temp_images_api_v1_assets_temp_sessions__session_id__promote_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/google': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Google Login
     * @description 使用谷歌 ID token 登录
     *
     *     验证谷歌 ID token，并在数据库中创建或更新用户信息
     */
    post: operations['google_login_api_v1_auth_google_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Logout
     * @description 登出用户，清除Cookie中的token
     */
    post: operations['logout_api_v1_auth_logout_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Review Point Definitions Endpoint */
    get: operations['list_review_point_definitions_endpoint_api_v1_review_point_definitions__get'];
    put?: never;
    /** Create Review Point Definition Endpoint */
    post: operations['create_review_point_definition_endpoint_api_v1_review_point_definitions__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/appellation-data/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get appellation table data
     * @description Retrieve the complete appellation table data from S3 storage.
     */
    get: operations['get_appellation_data_endpoint_api_v1_review_point_definitions_appellation_data__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/{rpd_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Review Point Definition Endpoint */
    get: operations['get_review_point_definition_endpoint_api_v1_review_point_definitions__rpd_id___get'];
    put?: never;
    post?: never;
    /**
     * Soft-delete a Review Point Definition
     * @description Marks a Review Point Definition as deleted by setting its `is_deleted` flag to true. This makes it inaccessible through the API but preserves all data in the database, including all versions and generated AI review findings. This action is reversible in the database.
     */
    delete: operations['delete_review_point_definition_endpoint_api_v1_review_point_definitions__rpd_id___delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/{rpd_id}/versions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create New Version For Review Point Endpoint */
    post: operations['create_new_version_for_review_point_endpoint_api_v1_review_point_definitions__rpd_id__versions__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/{rpd_id}/status/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Rpd Status Endpoint */
    patch: operations['update_rpd_status_endpoint_api_v1_review_point_definitions__rpd_id__status__patch'];
    trace?: never;
  };
  '/api/v1/review-point-definitions/generate-description/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate Description Endpoint
     * @description 根据图片和标签生成AI描述
     *
     *     Args:
     *         request: 包含tag和image_url的请求体
     *         current_user: 当前用户
     *
     *     Returns:
     *         GenerateDescriptionResponse: 生成的英日文描述
     */
    post: operations['generate_description_endpoint_api_v1_review_point_definitions_generate_description__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/rewrite-prompt': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Rewrite user prompt with AI based on image
     * @description Uses AI to transform a simple user prompt into a more complete, professional, and effective prompt. This endpoint analyzes the image content from the specified subtask to create a detailed and context-aware prompt.
     */
    post: operations['rewrite_prompt_endpoint_api_v1_review_point_definitions_rewrite_prompt_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/generate-rpd-content': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate complete RPD content with AI
     * @description Uses AI to generate complete RPD content including key, title, descriptions, and tags based on user input and optional image.
     */
    post: operations['generate_rpd_content_endpoint_api_v1_review_point_definitions_generate_rpd_content_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/generate-image-description': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate detailed image description with AI
     * @description Uses AI to generate detailed image description including visual analysis, key elements, style analysis, and suggested keywords.
     */
    post: operations['generate_image_description_endpoint_api_v1_review_point_definitions_generate_image_description_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/autofill-title': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Autofill Rpd Title
     * @description RPDタイトルの智能补全API
     *
     *     ユーザーの入力に基づいてGemini AIが生成した
     *     RPDタイトルの補完候補を3-5個返します
     */
    post: operations['autofill_rpd_title_api_v1_review_point_definitions_autofill_title_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/test-rpd-with-image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Test RPD analysis with a single image
     * @description Directly analyze a single uploaded image with a specific RPD version data for testing purposes. This endpoint is designed for RPD creation and testing workflows, providing immediate feedback without creating permanent tasks or subtasks.
     */
    post: operations['test_rpd_with_image_endpoint_api_v1_review_point_definitions_test_rpd_with_image_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/upload-appellation-file/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload and parse appellation table file
     * @description Upload an Excel or JSON file containing character appellation mappings. Excel files will be converted to JSON format and stored in S3. The file should contain a matrix where rows represent speakers and columns represent targets.
     */
    post: operations['upload_appellation_file_endpoint_api_v1_review_point_definitions_upload_appellation_file__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/test-rpd-with-text': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Test text review RPD with dialogue text
     * @description Test a text review RPD by analyzing a single dialogue line. This endpoint checks character appellations and special rules against the provided dialogue text.
     */
    post: operations['test_rpd_with_text_endpoint_api_v1_review_point_definitions_test_rpd_with_text_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/{rpd_id}/characters/{character_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add character association to RPD
     * @description Add a character association to an RPD using direct many-to-many relationship.
     */
    post: operations['add_character_to_rpd_api_v1_review_point_definitions__rpd_id__characters__character_id__post'];
    /**
     * Remove character association from RPD
     * @description Remove a character association from an RPD.
     */
    delete: operations['remove_character_from_rpd_api_v1_review_point_definitions__rpd_id__characters__character_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-point-definitions/{rpd_id}/characters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get characters associated with RPD
     * @description Get all characters associated with an RPD.
     */
    get: operations['get_rpd_characters_api_v1_review_point_definitions__rpd_id__characters_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/initiate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Initiate a new AI Review for a Subtask
     * @description Triggers the full AI review process for the specified subtask, including element detection and finding generation for all active review points. A new, versioned AIReview record will be created.
     */
    post: operations['initiate_ai_review_endpoint_api_v1_ai_reviews_subtasks__subtask_id__initiate_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/{ai_review_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a specific AI Review by ID
     * @description Retrieves the full details of a specific AI Review, including all its findings and detected elements.
     */
    get: operations['get_ai_review_by_id_endpoint_api_v1_ai_reviews__ai_review_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/latest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the latest AI Review for a Subtask
     * @description Retrieves the most recent (latest version) AI Review for the specified subtask, including all findings and detected elements.
     */
    get: operations['get_latest_ai_review_for_subtask_endpoint_api_v1_ai_reviews_subtasks__subtask_id__latest_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all AI Review versions for a Subtask
     * @description Retrieves a list of all AI Review versions for the specified subtask, ordered from newest to oldest. Each review includes all findings and detected elements.
     */
    get: operations['list_ai_reviews_for_subtask_endpoint_api_v1_ai_reviews_subtasks__subtask_id__all_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/batch/cr-check/initiate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Batch initiate CR Check AI Reviews for multiple tasks
     * @description Triggers the AI review process for all subtasks within the specified tasks, with CR Check enabled.
     */
    post: operations['batch_initiate_cr_check_review_endpoint_api_v1_ai_reviews_batch_cr_check_initiate_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/batch/initiate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Batch initiate AI Reviews for multiple tasks with custom RPDs
     * @description Triggers the AI review process for all subtasks within the specified tasks, with custom RPD selection.
     */
    post: operations['batch_initiate_custom_ai_review_endpoint_api_v1_ai_reviews_batch_initiate_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/interrupt': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Interrupt AI Review processing for a Subtask
     * @description Interrupts the currently running AI review process for the specified subtask. The review status will be set to 'cancelled' and the background processing will be stopped.
     */
    post: operations['interrupt_ai_review_endpoint_api_v1_ai_reviews_subtasks__subtask_id__interrupt_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/processing-status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check AI Review processing status for a Subtask
     * @description Returns the current processing status of AI review for the specified subtask. This endpoint can be used for polling to check if the background AI review process has completed.
     */
    get: operations['get_ai_review_processing_status_endpoint_api_v1_ai_reviews_subtasks__subtask_id__processing_status_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/predict-character': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Predict character for a subtask
     * @description Uses AI to predict the most likely character present in the given subtask's content. Runs as a background task to avoid blocking the UI.
     */
    post: operations['predict_character_for_subtask_endpoint_api_v1_ai_reviews_subtasks__subtask_id__predict_character_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/findings/{finding_id}/fixed-status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update finding fixed status
     * @description Update the is_fixed status of a specific AI review finding entry. This allows users to mark findings as fixed/resolved to keep them visible in future reviews.
     */
    patch: operations['update_finding_fixed_status_endpoint_api_v1_ai_reviews_findings__finding_id__fixed_status_patch'];
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/findings-summary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get optimized AI Review for subtask with relevant findings
     * @description Get an AI Review for a subtask with optimized findings data, including latest findings and fixed historical findings. This optimized endpoint avoids scanning all historical versions while maintaining the same response format as get_latest_ai_review_for_subtask.
     */
    get: operations['get_findings_summary_endpoint_api_v1_ai_reviews_subtasks__subtask_id__findings_summary_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/findings/{finding_id}/content': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update finding content
     * @description Update the content of a specific AI review finding entry (description, severity, suggestion). This allows users to modify the finding details while keeping the original AI finding for reference.
     */
    patch: operations['update_finding_content_endpoint_api_v1_ai_reviews_findings__finding_id__content_patch'];
    trace?: never;
  };
  '/api/v1/ai-reviews/characters/{character_id}/rpd-recommendations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get RPD recommendations for a character
     * @description Returns RPD recommendations based on the character's associations, sorted by weight/importance.
     */
    get: operations['get_character_rpd_recommendations_endpoint_api_v1_ai_reviews_characters__character_id__rpd_recommendations_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/findings/{finding_id}/bounding-box': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update finding bounding box
     * @description Update the bounding box area of a specific AI review finding entry. This allows users to modify the position and size of the finding's bounding box.
     */
    patch: operations['update_finding_bounding_box_endpoint_api_v1_ai_reviews_findings__finding_id__bounding_box_patch'];
    trace?: never;
  };
  '/api/v1/ai-reviews/subtasks/{subtask_id}/latest-executed-rpds': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get latest executed RPDs for a subtask
     * @description 获取子任务最近一次AI审核执行的所有RPD信息
     */
    get: operations['get_latest_executed_rpds_api_v1_ai_reviews_subtasks__subtask_id__latest_executed_rpds_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/{ai_review_id}/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Cancel AI Review processing
     * @description Cancel an ongoing AI Review process. This will set the cancellation signal and the processing will stop at the next checkpoint.
     */
    post: operations['cancel_ai_review_api_v1_ai_reviews__ai_review_id__cancel_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai-reviews/tasks/{task_id}/review-set-recommendations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Review Set recommendations for a task
     * @description Returns Review Set recommendations based on the task's characters and tags, with 60/40 scoring algorithm.
     */
    get: operations['get_task_review_set_recommendations_endpoint_api_v1_ai_reviews_tasks__task_id__review_set_recommendations_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Characters
     * @description 获取角色列表，可以按项目或IP筛选
     */
    get: operations['list_characters_api_v1_characters__get'];
    put?: never;
    /**
     * Create Character
     * @description 创建新角色
     */
    post: operations['create_character_api_v1_characters__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Character
     * @description 获取角色详情
     */
    get: operations['get_character_api_v1_characters__character_id__get'];
    /**
     * Update Character
     * @description 更新角色信息
     */
    put: operations['update_character_api_v1_characters__character_id__put'];
    post?: never;
    /**
     * Delete Character
     * @description 删除角色
     */
    delete: operations['delete_character_api_v1_characters__character_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/upload-image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Character Image
     * @description 上传角色图片到S3存储
     */
    post: operations['upload_character_image_api_v1_characters__character_id__upload_image_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Character Image
     * @description 从S3直接获取角色图片并返回给前端
     */
    get: operations['get_character_image_api_v1_characters__character_id__image_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/gallery': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Character Gallery
     * @description 获取角色画廊图片列表
     */
    get: operations['get_character_gallery_api_v1_characters__character_id__gallery_get'];
    put?: never;
    /**
     * Upload Character Gallery Image
     * @description 上传角色画廊图片
     */
    post: operations['upload_character_gallery_image_api_v1_characters__character_id__gallery_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/concept-art': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Character Concept Art
     * @description 获取角色设定集图片列表
     */
    get: operations['get_character_concept_art_api_v1_characters__character_id__concept_art_get'];
    put?: never;
    /**
     * Upload Character Concept Art Image
     * @description 上传角色设定集图片
     */
    post: operations['upload_character_concept_art_image_api_v1_characters__character_id__concept_art_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/gallery/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Character Gallery Images Batch
     * @description 批量上传角色画廊图片
     */
    post: operations['upload_character_gallery_images_batch_api_v1_characters__character_id__gallery_batch_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/gallery/{image_index}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Character Gallery Image
     * @description 删除角色画廊中的指定图片
     */
    delete: operations['delete_character_gallery_image_api_v1_characters__character_id__gallery__image_index__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/concept-art/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Character Concept Art Images Batch
     * @description 批量上传角色设定集图片
     */
    post: operations['upload_character_concept_art_images_batch_api_v1_characters__character_id__concept_art_batch_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/concept-art/{image_index}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Character Concept Art Image
     * @description 删除角色设定集中的指定图片
     */
    delete: operations['delete_character_concept_art_image_api_v1_characters__character_id__concept_art__image_index__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/rpds/{rpd_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add RPD association to character
     * @description Add an RPD association to a character using direct many-to-many relationship.
     */
    post: operations['add_rpd_to_character_api_v1_characters__character_id__rpds__rpd_id__post'];
    /**
     * Remove RPD association from character
     * @description Remove an RPD association from a character.
     */
    delete: operations['remove_rpd_from_character_api_v1_characters__character_id__rpds__rpd_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/characters/{character_id}/rpds': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get RPDs associated with character
     * @description Get all RPDs associated with a character.
     */
    get: operations['get_character_rpds_api_v1_characters__character_id__rpds_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ips/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Ips
     * @description 获取IP列表，可以按项目筛选
     */
    get: operations['list_ips_api_v1_ips__get'];
    put?: never;
    /**
     * Create Ip
     * @description 创建新IP
     */
    post: operations['create_ip_api_v1_ips__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ips/{ip_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Ip
     * @description 获取IP详情
     */
    get: operations['get_ip_api_v1_ips__ip_id__get'];
    /**
     * Update Ip
     * @description 更新IP信息
     */
    put: operations['update_ip_api_v1_ips__ip_id__put'];
    post?: never;
    /**
     * Delete Ip
     * @description 删除IP
     */
    delete: operations['delete_ip_api_v1_ips__ip_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/batch-upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Batch Upload Items
     * @description 批量上传图片到S3并创建Items记录 - 使用后台任务处理以避免超时
     *
     *     Args:
     *         files: 上传的图片文件列表
     *         project_id: 可选的项目ID
     *         tags: 可选的标签列表(JSON字符串格式)
     *         description: 可选的描述
     *
     *     Returns:
     *         JSONResponse: 包含批次ID和状态的响应，实际处理在后台进行
     */
    post: operations['batch_upload_items_api_v1_items_batch_upload_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/batch-upload/{batch_id}/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Batch Upload Status
     * @description 获取批量上传任务的状态
     *
     *     Args:
     *         batch_id: 批次ID
     *
     *     Returns:
     *         dict: 批次状态信息
     */
    get: operations['get_batch_upload_status_api_v1_items_batch_upload__batch_id__status_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/projects/{project_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Items
     * @description 获取用户的Items列表
     *
     *     Args:
     *         project_id: 可选的项目ID过滤
     *         tags: 可选的标签过滤(逗号分隔)
     *         page: 页码 (从1开始)
     *         size: 每页数量 (1-1000)
     *
     *     Returns:
     *         Page[ItemResponse]: 分页的Items列表
     */
    get: operations['list_items_api_v1_items_projects__project_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/projects/{project_id}/generate-embeddings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate Project Embeddings
     * @description 为项目的items生成vector embeddings
     *
     *     Args:
     *         project_id: 项目ID
     *         item_ids: 可选的item ID列表，如果为None则处理所有items
     *
     *     Returns:
     *         dict: 处理结果统计
     */
    post: operations['generate_project_embeddings_api_v1_items_projects__project_id__generate_embeddings_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/{item_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Item
     * @description 获取特定Item的详细信息
     *
     *     Args:
     *         item_id: Item ID
     *
     *     Returns:
     *         ItemResponse: Item详细信息
     */
    get: operations['get_item_api_v1_items__item_id__get'];
    /**
     * Update Item
     * @description 更新Item信息
     *
     *     Args:
     *         item_id: Item ID
     *         item_update: 更新数据
     *
     *     Returns:
     *         ItemResponse: 更新后的Item信息
     */
    put: operations['update_item_api_v1_items__item_id__put'];
    post?: never;
    /**
     * Delete Item
     * @description 删除Item
     *
     *     Args:
     *         item_id: Item ID
     *
     *     Returns:
     *         dict: 删除确认消息
     */
    delete: operations['delete_item_api_v1_items__item_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Project Items
     * @description 获取特定项目的Items列表
     *
     *     Args:
     *         project_id: 项目ID
     *         tags: 可选的标签过滤(逗号分隔)
     *         page: 页码 (从1开始)
     *         size: 每页数量 (1-1000)
     *
     *     Returns:
     *         Page[ItemResponse]: 项目Items列表
     */
    get: operations['list_project_items_api_v1_items__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/projects/{project_id}/search-by-image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Search Items By Image
     * @description 根据图片URL在项目中搜索相似的items
     *
     *     Args:
     *         project_id: 项目ID
     *         request: 包含图片URL和结果数量限制的请求体
     *
     *     Returns:
     *         dict: 搜索结果
     */
    post: operations['search_items_by_image_api_v1_items_projects__project_id__search_by_image_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/items/projects/{project_id}/detect-objects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Detect Objects In Image
     * @description 在图片中检测对象并返回边界框信息，并保存到subtask的ai_detection字段
     *
     *     使用background task来执行，避免阻塞UI
     *
     *     Args:
     *         project_id: 项目ID
     *         request: 包含图片URL、subtask_id和限制数量的请求体
     *
     *     Returns:
     *         dict: 响应消息，表示任务已开始
     */
    post: operations['detect_objects_in_image_api_v1_items_projects__project_id__detect_objects_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/reference-generation/projects/{project_id}/generate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate References
     * @description Generate character references - MVP endpoint
     */
    post: operations['generate_references_api_v1_reference_generation_projects__project_id__generate_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/reference-generation/projects/{project_id}/references': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List References
     * @description List generated references - simple version
     */
    get: operations['list_references_api_v1_reference_generation_projects__project_id__references_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Batch Process Jobs
     * @description List all batch process jobs.
     */
    get: operations['get_batch_process_jobs_api_v1_batch_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/batch/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Batch Processing Stats
     * @description Get batch processing statistics.
     */
    get: operations['get_batch_processing_stats_api_v1_batch_stats_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/batch/{job_id}/detail': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Batch Processing Detail
     * @description Get detailed batch processing record by ID.
     */
    get: operations['get_batch_processing_detail_api_v1_batch__job_id__detail_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/batch/{job_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Batch Process Job
     * @description Get a single batch process job by ID.
     */
    get: operations['get_batch_process_job_api_v1_batch__job_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/task-tags/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Task Tags */
    get: operations['list_task_tags_api_v1_task_tags__get'];
    put?: never;
    /** Create Task Tag */
    post: operations['create_task_tag_api_v1_task_tags__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/task-tags/{tag_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Task Tag */
    get: operations['get_task_tag_api_v1_task_tags__tag_id__get'];
    /** Update Task Tag */
    put: operations['update_task_tag_api_v1_task_tags__tag_id__put'];
    post?: never;
    /** Delete Task Tag */
    delete: operations['delete_task_tag_api_v1_task_tags__tag_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-sets/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Review Sets */
    get: operations['list_review_sets_api_v1_review_sets__get'];
    put?: never;
    /** Create Review Set */
    post: operations['create_review_set_api_v1_review_sets__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-sets/{review_set_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Review Set */
    get: operations['get_review_set_api_v1_review_sets__review_set_id__get'];
    /** Update Review Set */
    put: operations['update_review_set_api_v1_review_sets__review_set_id__put'];
    post?: never;
    /** Delete Review Set */
    delete: operations['delete_review_set_api_v1_review_sets__review_set_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-set-character-associations/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Review Set Character Association
     * @description 创建ReviewSet和Character的关联
     */
    post: operations['create_review_set_character_association_api_v1_review_set_character_associations__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-set-character-associations/review_set/{review_set_id}/character/{character_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Review Set Character Association
     * @description 获取特定的ReviewSet和Character关联详情
     */
    get: operations['get_review_set_character_association_api_v1_review_set_character_associations_review_set__review_set_id__character__character_id__get'];
    put?: never;
    post?: never;
    /**
     * Delete Review Set Character Association
     * @description 删除ReviewSet和Character的关联
     */
    delete: operations['delete_review_set_character_association_api_v1_review_set_character_associations_review_set__review_set_id__character__character_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-set-character-associations/review_set/{review_set_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Review Set Character Associations By Review Set
     * @description 获取特定ReviewSet的所有Character关联
     */
    get: operations['get_review_set_character_associations_by_review_set_api_v1_review_set_character_associations_review_set__review_set_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/review-set-character-associations/character/{character_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Review Set Character Associations By Character
     * @description 获取特定Character的所有ReviewSet关联
     */
    get: operations['get_review_set_character_associations_by_character_api_v1_review_set_character_associations_character__character_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/video/scenes/analyze': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Analyze Video Scenes
     * @description 分析视频场景切换点
     *
     *     - **file**: 视频文件 (支持 MP4, MOV, AVI 等格式)
     *     - **detector_type**: 检测器类型 ("adaptive" 或 "content")
     *     - **threshold**: 检测阈值 (可选，使用默认值)
     */
    post: operations['analyze_video_scenes_api_v1_video_scenes_analyze_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/video/scenes/{scene_number}/frames': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Scene Frames
     * @description 获取指定场景的关键帧（第一帧、中间帧、最后帧）
     *
     *     - **scene_number**: 场景编号 (从1开始)
     *     - **file**: 视频文件
     *     - **detector_type**: 检测器类型 ("adaptive" 或 "content")
     */
    post: operations['get_scene_frames_api_v1_video_scenes__scene_number__frames_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/video/scenes/{scene_number}/frames-with-info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Scene Frames With Info
     * @description 获取指定场景的关键帧和详细信息
     *
     *     - **scene_number**: 场景编号 (从1开始)
     *     - **file**: 视频文件
     *     - **detector_type**: 检测器类型 ("adaptive" 或 "content")
     *     - **threshold**: 检测阈值 (可选)
     */
    post: operations['get_scene_frames_with_info_api_v1_video_scenes__scene_number__frames_with_info_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pdf/extract-preview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Extract Pdf Preview
     * @description 从PDF提取图片并生成预览，存储到临时S3路径
     */
    post: operations['extract_pdf_preview_api_v1_pdf_extract_preview_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pdf/confirm-extraction/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Confirm Pdf Extraction
     * @description 确认PDF图片提取，将选中的图片通过items流程保存
     */
    post: operations['confirm_pdf_extraction_api_v1_pdf_confirm_extraction__session_id__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pdf/sessions/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Cleanup Pdf Session
     * @description 清理PDF会话的临时文件
     */
    delete: operations['cleanup_pdf_session_api_v1_pdf_sessions__session_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pdf/projects/{project_id}/pdfs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Project Pdfs
     * @description 获取项目中的所有PDF文件
     */
    get: operations['list_project_pdfs_api_v1_pdf_projects__project_id__pdfs_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pdf/pdfs/{pdf_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Pdf Details
     * @description 获取PDF详细信息
     */
    get: operations['get_pdf_details_api_v1_pdf_pdfs__pdf_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/pdf/pdfs/{pdf_id}/items': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Pdf Extracted Items
     * @description 获取PDF提取的所有图片
     */
    get: operations['get_pdf_extracted_items_api_v1_pdf_pdfs__pdf_id__items_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/drawing/subtasks/{subtask_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Subtask Drawing
     * @description Get the drawing annotation for a subtask if it exists.
     */
    get: operations['get_subtask_drawing_api_v1_drawing_subtasks__subtask_id__get'];
    /**
     * Save Subtask Drawing
     * @description Save or update drawing annotation for a subtask.
     */
    put: operations['save_subtask_drawing_api_v1_drawing_subtasks__subtask_id__put'];
    post?: never;
    /**
     * Delete Subtask Drawing
     * @description Delete drawing annotation from a subtask.
     */
    delete: operations['delete_subtask_drawing_api_v1_drawing_subtasks__subtask_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AIClassificationStatus
     * @enum {string}
     */
    AIClassificationStatus: 'unclassified' | 'in_progress' | 'classified';
    /** AIReviewInitiateRequest */
    AIReviewInitiateRequest: {
      /**
       * Rpd Ids
       * @description A list of Review Point Definition IDs to run. If not provided, no RPD-based review will run (unless cr_check=True).
       */
      rpd_ids?: string[] | null;
    };
    /** AiDetectedElement */
    AiDetectedElement: {
      /** Name */
      name: string;
      /** Confidence */
      confidence: number;
      /**
       * Label
       * @enum {string}
       */
      label: 'character' | 'object' | 'text';
      /** X */
      x?: number | null;
      /** Y */
      y?: number | null;
      /** Width */
      width?: number | null;
      /** Height */
      height?: number | null;
      /** @description Bounding box of the detected element. */
      area: components['schemas']['FindingArea'];
      /**
       * Character Id
       * @description 引用到已知角色的ID，如果检测到了已知角色
       */
      character_id?: string | null;
    };
    /**
     * AiDetectedElements
     * @description Container for all detected elements from an image, including an overall description.
     */
    AiDetectedElements: {
      /**
       * Description
       * @description Overall textual description of the image content based on AI detection.
       */
      description?: string | null;
      /**
       * Elements
       * @description List of individual elements detected in the image.
       */
      elements?: components['schemas']['AiDetectedElement'][];
    };
    /** AiReview */
    AiReview: {
      /**
       * Subtask Id
       * Format: uuid
       */
      subtask_id: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Version */
      version: number;
      /** Is Latest */
      is_latest: boolean;
      /**
       * Review Timestamp
       * Format: date-time
       */
      review_timestamp: string;
      /** Initiated By User Id */
      initiated_by_user_id?: string | null;
      /** Last Modified By User Id */
      last_modified_by_user_id?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Findings
       * @default []
       */
      findings: components['schemas']['AiReviewFindingEntry'][];
      /** Processing Status */
      processing_status?: string | null;
      /** Error Message */
      error_message?: string | null;
      /** Processing Started At */
      processing_started_at?: string | null;
      /** Processing Completed At */
      processing_completed_at?: string | null;
      /** Should Cancel */
      should_cancel?: boolean | null;
      /** Detected Elements */
      detected_elements?: components['schemas']['AiDetectedElement'][] | null;
      /** @description Summary of detected elements in the image, including an overall description and list of elements. */
      detected_elements_summary?: components['schemas']['AiDetectedElements'] | null;
    };
    /** AiReviewFindingEntry */
    AiReviewFindingEntry: {
      /** Description */
      description: string;
      /**
       * Severity
       * @enum {string}
       */
      severity: 'risk' | 'alert' | 'safe' | 'high' | 'medium' | 'low';
      /** Suggestion */
      suggestion?: string | null;
      /** @description Bounding box area of the finding. */
      area: components['schemas']['FindingArea'];
      /**
       * Reference Images
       * @description Reference images for the finding.
       * @default []
       */
      reference_images: string[] | null;
      /**
       * Reference Source
       * @description Textual description of the reference source or document.
       */
      reference_source?: string | null;
      /**
       * Tag
       * @description Tag for categorizing the finding.
       */
      tag?: string | null;
      /** Is Ai Generated */
      is_ai_generated: boolean;
      /**
       * Is Fixed
       * @description Whether this finding is marked as fixed/resolved by user
       * @default false
       */
      is_fixed: boolean;
      /**
       * Status
       * @enum {string}
       */
      status:
        | 'pending_ai_review'
        | 'pending_human_review'
        | 'ai_suggestion_accepted'
        | 'ai_suggestion_modified'
        | 'ai_suggestion_rejected'
        | 'human_added'
        | 'resolved'
        | 'ignored'
        | 'promoted_to_kb'
        | 'superseded';
      /**
       * @description Type of content being reviewed (picture, video, text, etc.)
       * @default picture
       */
      content_type: components['schemas']['SubtaskType'];
      /**
       * Content Metadata
       * @description Type-specific metadata (e.g., video timestamps, text positions)
       */
      content_metadata?: Record<string, never> | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Ai Review Id
       * Format: uuid
       */
      ai_review_id: string;
      /**
       * Review Point Definition Version Id
       * Format: uuid
       */
      review_point_definition_version_id: string;
      /** Original Ai Finding Id */
      original_ai_finding_id?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** AiReviewFindingEntry */
    AiReviewFindingEntry_65wckp_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Review Point Definition Version */
      review_point_definition_version: components['schemas']['ReviewPointDefinitionVersion_2kcj3z_leaf'];
      /** Description */
      description: string;
      /** Severity */
      severity: string;
      /** Suggestion */
      suggestion?: (string | null) | null;
      /** Area */
      area?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Reference Images
       * @description List of reference images for the finding.
       */
      reference_images?: (string[] | null) | null;
      /** Reference Source */
      reference_source?: (string | null) | null;
      /**
       * Tag
       * @description Tag for categorizing the finding
       */
      tag?: (string | null) | null;
      /** Is Ai Generated */
      is_ai_generated: boolean;
      /**
       * Is Fixed
       * @description Whether this finding is marked as fixed/resolved by user
       * @default false
       */
      is_fixed: boolean | null;
      /** Original Ai Finding */
      original_ai_finding: (components['schemas']['AiReviewFindingEntry_i23odv_leaf'] | null) | null;
      /** Status */
      status: string;
      /**
       * Content Type
       * @description Type of content being reviewed
       * @default picture
       */
      content_type: components['schemas']['SubtaskType'] | null;
      /**
       * Content Metadata
       * @description Type-specific metadata (e.g., video timestamps, text positions)
       */
      content_metadata?: (Record<string, never> | null) | null;
      /** Modifications */
      modifications: components['schemas']['AiReviewFindingEntry_i23odv_leaf'][];
      /** Promotion Details Forward */
      promotion_details_forward: (components['schemas']['PromotedFinding_pkcm32_leaf'] | null) | null;
    };
    /** AiReviewFindingEntry */
    AiReviewFindingEntry_i23odv_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Description */
      description: string;
      /** Severity */
      severity: string;
      /** Suggestion */
      suggestion?: (string | null) | null;
      /** Area */
      area?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Reference Images
       * @description List of reference images for the finding.
       */
      reference_images?: (string[] | null) | null;
      /** Reference Source */
      reference_source?: (string | null) | null;
      /**
       * Tag
       * @description Tag for categorizing the finding
       */
      tag?: (string | null) | null;
      /** Is Ai Generated */
      is_ai_generated: boolean;
      /**
       * Is Fixed
       * @description Whether this finding is marked as fixed/resolved by user
       * @default false
       */
      is_fixed: boolean | null;
      /** Status */
      status: string;
      /**
       * Content Type
       * @description Type of content being reviewed
       * @default picture
       */
      content_type: components['schemas']['SubtaskType'] | null;
      /**
       * Content Metadata
       * @description Type-specific metadata (e.g., video timestamps, text positions)
       */
      content_metadata?: (Record<string, never> | null) | null;
    };
    /**
     * AiReviewMode
     * @enum {string}
     */
    AiReviewMode: 'quality' | 'speed';
    /** AiReview */
    AiReview_d7n2fs_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Version */
      version: number;
      /**
       * Is Latest
       * @default true
       */
      is_latest: boolean | null;
      /** Ai Review Output Json */
      ai_review_output_json?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Review Timestamp
       * Format: date-time
       */
      readonly review_timestamp: string;
      /**
       * Processing Status
       * @description PENDING: pending<br/>PROCESSING: processing<br/>COMPLETED: completed<br/>FAILED: failed<br/>CANCELLED: cancelled
       * @default pending
       */
      processing_status: components['schemas']['aimage_supervision__enums__AiReviewProcessingStatus'] | null;
      /** Error Message */
      error_message?: (string | null) | null;
      /** Processing Started At */
      processing_started_at?: (string | null) | null;
      /** Processing Completed At */
      processing_completed_at?: (string | null) | null;
      /**
       * Should Cancel
       * @default false
       */
      should_cancel: boolean | null;
    };
    /** AiReview */
    AiReview_zid4jh_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Version */
      version: number;
      /**
       * Is Latest
       * @default true
       */
      is_latest: boolean | null;
      /** Ai Review Output Json */
      ai_review_output_json?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Review Timestamp
       * Format: date-time
       */
      readonly review_timestamp: string;
      /** Initiated By User */
      initiated_by_user: (components['schemas']['User_icoj3a_leaf'] | null) | null;
      /** Last Modified By User */
      last_modified_by_user: (components['schemas']['User_icoj3a_leaf'] | null) | null;
      /**
       * Processing Status
       * @description PENDING: pending<br/>PROCESSING: processing<br/>COMPLETED: completed<br/>FAILED: failed<br/>CANCELLED: cancelled
       * @default pending
       */
      processing_status: components['schemas']['aimage_supervision__enums__AiReviewProcessingStatus'] | null;
      /** Error Message */
      error_message?: (string | null) | null;
      /** Processing Started At */
      processing_started_at?: (string | null) | null;
      /** Processing Completed At */
      processing_completed_at?: (string | null) | null;
      /**
       * Should Cancel
       * @default false
       */
      should_cancel: boolean | null;
      /** Findings */
      findings: components['schemas']['AiReviewFindingEntry_65wckp_leaf'][];
    };
    /**
     * AppellationDataResponse
     * @description 称呼表数据响应模型
     */
    AppellationDataResponse: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
      /**
       * Data
       * @default {}
       */
      data: {
        [key: string]: {
          [key: string]: string;
        };
      };
      /**
       * Characters
       * @default []
       */
      characters: string[];
      /**
       * Character Count
       * @default 0
       */
      character_count: number;
    };
    /**
     * AppellationUploadResponse
     * @description 称呼表上传响应模型
     */
    AppellationUploadResponse: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
      /**
       * S3 Url
       * @default
       */
      s3_url: string;
      /**
       * File Type
       * @default
       */
      file_type: string;
      /**
       * Characters
       * @default []
       */
      characters: string[];
      /**
       * Character Count
       * @default 0
       */
      character_count: number;
      /**
       * Total Appellations
       * @default 0
       */
      total_appellations: number;
      /**
       * Validation Warnings
       * @default []
       */
      validation_warnings: string[];
    };
    /** AssetIn */
    AssetIn: {
      /** Drive File Id */
      drive_file_id: string;
      /** File Name */
      file_name: string;
      /** Mime Type */
      mime_type?: (string | null) | null;
    };
    /** AssetOut */
    AssetOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Drive File Id */
      drive_file_id: string;
      /** File Name */
      file_name: string;
      /** S3 Path */
      s3_path: string;
      /** Mime Type */
      mime_type?: (string | null) | null;
      /**
       * Status
       * @description UPLOADING: uploading<br/>PENDING: pending<br/>PROCESSING: processing<br/>DONE: done<br/>FAILED: failed
       * @default uploading
       */
      status: components['schemas']['AssetStatus'] | null;
      /** Project */
      project: components['schemas']['Project_657ngw_leaf'];
      /**
       * Author Id
       * Format: uuid
       */
      author_id: string;
    };
    /** AssetResponse */
    AssetResponse: {
      /** Url */
      url: string;
    };
    /**
     * AssetStatus
     * @enum {string}
     */
    AssetStatus: 'uploading' | 'pending' | 'processing' | 'done' | 'failed';
    /** Asset */
    Asset_bqbv2z_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Drive File Id */
      drive_file_id: string;
      /** File Name */
      file_name: string;
      /** S3 Path */
      s3_path: string;
      /** Mime Type */
      mime_type?: (string | null) | null;
      /**
       * Status
       * @description UPLOADING: uploading<br/>PENDING: pending<br/>PROCESSING: processing<br/>DONE: done<br/>FAILED: failed
       * @default uploading
       */
      status: components['schemas']['AssetStatus'] | null;
    };
    /** Asset */
    Asset_ygubkn_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Drive File Id */
      drive_file_id: string;
      /** File Name */
      file_name: string;
      /** S3 Path */
      s3_path: string;
      /** Mime Type */
      mime_type?: (string | null) | null;
      /**
       * Status
       * @description UPLOADING: uploading<br/>PENDING: pending<br/>PROCESSING: processing<br/>DONE: done<br/>FAILED: failed
       * @default uploading
       */
      status: components['schemas']['AssetStatus'] | null;
      /** Author */
      author: components['schemas']['User_tb4km4_leaf'];
    };
    /**
     * AutofillRequest
     * @description 智能补全请求模型
     */
    AutofillRequest: {
      /** User Input */
      user_input: string;
      /** Context */
      context?: string | null;
      /** Rpd Type */
      rpd_type: string;
      /**
       * Max Suggestions
       * @default 5
       */
      max_suggestions: number;
    };
    /**
     * AutofillResponse
     * @description 智能补全响应模型
     */
    AutofillResponse: {
      /** Suggestions */
      suggestions: components['schemas']['AutofillSuggestion'][];
      /** Original Input */
      original_input: string;
      /** Success */
      success: boolean;
      /** Error Message */
      error_message?: string | null;
    };
    /**
     * AutofillSuggestion
     * @description 单个补全建议
     */
    AutofillSuggestion: {
      /** Text */
      text: string;
      /** Confidence */
      confidence: number;
      /** Reason */
      reason?: string | null;
    };
    /** BatchInitiateAiReviewRequest */
    BatchInitiateAiReviewRequest: {
      /**
       * Project Id
       * Format: uuid
       * @description The ID of the project these tasks belong to.
       */
      project_id: string;
      /**
       * Task Ids
       * @description A list of task IDs to initiate AI review for.
       */
      task_ids: string[];
    };
    /** BatchInitiateCustomAiReviewRequest */
    BatchInitiateCustomAiReviewRequest: {
      /**
       * Project Id
       * Format: uuid
       * @description The ID of the project these tasks belong to.
       */
      project_id: string;
      /**
       * Task Ids
       * @description A list of task IDs to initiate AI review for.
       */
      task_ids: string[];
      /**
       * Rpd Ids
       * @description A list of Review Point Definition IDs to run. If not provided, will use all active RPDs.
       */
      rpd_ids?: string[] | null;
      /**
       * Review Set Ids
       * @description A list of Review Set IDs to expand into RPD IDs.
       */
      review_set_ids?: string[] | null;
      /**
       * @description AI Review Mode: 'quality' for precision, 'speed' for faster results.
       * @default quality
       */
      mode: components['schemas']['AiReviewMode'];
    };
    /**
     * BatchJobStatus
     * @enum {string}
     */
    BatchJobStatus: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';
    /**
     * BatchProcessJobListItem
     * @description 批处理任务列表项响应模型 - 简化版，只包含列表显示需要的字段
     */
    BatchProcessJobListItem: {
      /** Id */
      id: string;
      /** Batch Id */
      batch_id: string;
      /** Job Type */
      job_type: string;
      /** Status */
      status: string;
      /** Created At */
      created_at: string;
      /** Completed At */
      completed_at?: string | null;
      /** Total Items */
      total_items: number;
      /** Successful Items */
      successful_items: number;
      /** Failed Items */
      failed_items: number;
      /** Duration Seconds */
      duration_seconds?: number | null;
      /** Initiated By User Name */
      initiated_by_user_name?: string | null;
      /** Initiated By User Email */
      initiated_by_user_email?: string | null;
    };
    /**
     * BatchProcessJobOut
     * @description 批处理任务模型，用于记录和跟踪批量处理任务的状态
     */
    BatchProcessJobOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Batch Id
       * @description 批次标识符，用于关联相关的处理任务
       */
      batch_id: string;
      /**
       * Job Name
       * @description 任务名称
       */
      job_name: string;
      /**
       * Job Type
       * @description 任务类型，如ai_review_cr_check
       */
      job_type: string;
      /**
       * Status
       * @description 批处理任务状态
       * @default pending
       */
      status: components['schemas']['BatchJobStatus'] | null;
      /**
       * Total Items
       * @description 总任务数量
       * @default 0
       */
      total_items: number | null;
      /**
       * Processed Items
       * @description 已处理任务数量
       * @default 0
       */
      processed_items: number | null;
      /**
       * Successful Items
       * @description 成功处理的任务数量
       * @default 0
       */
      successful_items: number | null;
      /**
       * Failed Items
       * @description 失败的任务数量
       * @default 0
       */
      failed_items: number | null;
      /**
       * Started At
       * @description 任务开始时间
       */
      started_at?: (string | null) | null;
      /**
       * Completed At
       * @description 任务完成时间
       */
      completed_at?: (string | null) | null;
      /**
       * Max Concurrent
       * @description 最大并发数
       * @default 4
       */
      max_concurrent: number | null;
      /**
       * Results
       * @description 任务结果，以JSON格式存储
       */
      results?: (Record<string, never> | null) | null;
      /**
       * Error Message
       * @description 错误信息
       */
      error_message?: (string | null) | null;
      /**
       * Created By Id
       * @description 创建该批处理任务的用户
       */
      created_by_id?: (string | null) | null;
      /**
       * Project Id
       * @description 关联的项目
       */
      project_id?: (string | null) | null;
      /**
       * Progress Percentage
       * @description 计算任务进度百分比
       */
      readonly progress_percentage: number;
      /**
       * Success Rate
       * @description 计算成功率
       */
      readonly success_rate: number;
      /**
       * Is Completed
       * @description 检查任务是否已完成
       */
      readonly is_completed: boolean;
      /**
       * Duration Seconds
       * @description 计算任务持续时间（秒）
       */
      readonly duration_seconds: number | null;
    };
    /**
     * BatchProcessJob
     * @description 批处理任务模型，用于记录和跟踪批量处理任务的状态
     */
    BatchProcessJob_bx6yub_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Batch Id
       * @description 批次标识符，用于关联相关的处理任务
       */
      batch_id: string;
      /**
       * Job Name
       * @description 任务名称
       */
      job_name: string;
      /**
       * Job Type
       * @description 任务类型，如ai_review_cr_check
       */
      job_type: string;
      /**
       * Status
       * @description 批处理任务状态
       * @default pending
       */
      status: components['schemas']['BatchJobStatus'] | null;
      /**
       * Created By
       * @description 创建该批处理任务的用户
       */
      created_by: (components['schemas']['User_rlfvwj_leaf'] | null) | null;
      /**
       * Total Items
       * @description 总任务数量
       * @default 0
       */
      total_items: number | null;
      /**
       * Processed Items
       * @description 已处理任务数量
       * @default 0
       */
      processed_items: number | null;
      /**
       * Successful Items
       * @description 成功处理的任务数量
       * @default 0
       */
      successful_items: number | null;
      /**
       * Failed Items
       * @description 失败的任务数量
       * @default 0
       */
      failed_items: number | null;
      /**
       * Started At
       * @description 任务开始时间
       */
      started_at?: (string | null) | null;
      /**
       * Completed At
       * @description 任务完成时间
       */
      completed_at?: (string | null) | null;
      /**
       * Max Concurrent
       * @description 最大并发数
       * @default 4
       */
      max_concurrent: number | null;
      /**
       * Parameters
       * @description 任务参数，以JSON格式存储
       */
      parameters?: (Record<string, never> | null) | null;
      /**
       * Results
       * @description 任务结果，以JSON格式存储
       */
      results?: (Record<string, never> | null) | null;
      /**
       * Error Message
       * @description 错误信息
       */
      error_message?: (string | null) | null;
      /**
       * Progress Percentage
       * @description 计算任务进度百分比
       */
      readonly progress_percentage: number;
      /**
       * Success Rate
       * @description 计算成功率
       */
      readonly success_rate: number;
      /**
       * Is Completed
       * @description 检查任务是否已完成
       */
      readonly is_completed: boolean;
      /**
       * Duration Seconds
       * @description 计算任务持续时间（秒）
       */
      readonly duration_seconds: number | null;
    };
    /**
     * BatchProcessJob
     * @description 批处理任务模型，用于记录和跟踪批量处理任务的状态
     */
    BatchProcessJob_tvdggc_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Batch Id
       * @description 批次标识符，用于关联相关的处理任务
       */
      batch_id: string;
      /**
       * Job Name
       * @description 任务名称
       */
      job_name: string;
      /**
       * Job Type
       * @description 任务类型，如ai_review_cr_check
       */
      job_type: string;
      /**
       * Status
       * @description 批处理任务状态
       * @default pending
       */
      status: components['schemas']['BatchJobStatus'] | null;
      /**
       * Total Items
       * @description 总任务数量
       * @default 0
       */
      total_items: number | null;
      /**
       * Processed Items
       * @description 已处理任务数量
       * @default 0
       */
      processed_items: number | null;
      /**
       * Successful Items
       * @description 成功处理的任务数量
       * @default 0
       */
      successful_items: number | null;
      /**
       * Failed Items
       * @description 失败的任务数量
       * @default 0
       */
      failed_items: number | null;
      /**
       * Started At
       * @description 任务开始时间
       */
      started_at?: (string | null) | null;
      /**
       * Completed At
       * @description 任务完成时间
       */
      completed_at?: (string | null) | null;
      /**
       * Max Concurrent
       * @description 最大并发数
       * @default 4
       */
      max_concurrent: number | null;
      /**
       * Parameters
       * @description 任务参数，以JSON格式存储
       */
      parameters?: (Record<string, never> | null) | null;
      /**
       * Results
       * @description 任务结果，以JSON格式存储
       */
      results?: (Record<string, never> | null) | null;
      /**
       * Error Message
       * @description 错误信息
       */
      error_message?: (string | null) | null;
      /**
       * Progress Percentage
       * @description 计算任务进度百分比
       */
      readonly progress_percentage: number;
      /**
       * Success Rate
       * @description 计算成功率
       */
      readonly success_rate: number;
      /**
       * Is Completed
       * @description 检查任务是否已完成
       */
      readonly is_completed: boolean;
      /**
       * Duration Seconds
       * @description 计算任务持续时间（秒）
       */
      readonly duration_seconds: number | null;
    };
    /**
     * BatchProcessJob
     * @description 批处理任务模型，用于记录和跟踪批量处理任务的状态
     */
    BatchProcessJob_vaw7qt_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Batch Id
       * @description 批次标识符，用于关联相关的处理任务
       */
      batch_id: string;
      /**
       * Job Name
       * @description 任务名称
       */
      job_name: string;
      /**
       * Job Type
       * @description 任务类型，如ai_review_cr_check
       */
      job_type: string;
      /**
       * Status
       * @description 批处理任务状态
       * @default pending
       */
      status: components['schemas']['BatchJobStatus'] | null;
      /**
       * Created By
       * @description 创建该批处理任务的用户
       */
      created_by: (components['schemas']['User_pitg6z_leaf'] | null) | null;
      /**
       * Total Items
       * @description 总任务数量
       * @default 0
       */
      total_items: number | null;
      /**
       * Processed Items
       * @description 已处理任务数量
       * @default 0
       */
      processed_items: number | null;
      /**
       * Successful Items
       * @description 成功处理的任务数量
       * @default 0
       */
      successful_items: number | null;
      /**
       * Failed Items
       * @description 失败的任务数量
       * @default 0
       */
      failed_items: number | null;
      /**
       * Started At
       * @description 任务开始时间
       */
      started_at?: (string | null) | null;
      /**
       * Completed At
       * @description 任务完成时间
       */
      completed_at?: (string | null) | null;
      /**
       * Max Concurrent
       * @description 最大并发数
       * @default 4
       */
      max_concurrent: number | null;
      /**
       * Parameters
       * @description 任务参数，以JSON格式存储
       */
      parameters?: (Record<string, never> | null) | null;
      /**
       * Results
       * @description 任务结果，以JSON格式存储
       */
      results?: (Record<string, never> | null) | null;
      /**
       * Error Message
       * @description 错误信息
       */
      error_message?: (string | null) | null;
      /**
       * Progress Percentage
       * @description 计算任务进度百分比
       */
      readonly progress_percentage: number;
      /**
       * Success Rate
       * @description 计算成功率
       */
      readonly success_rate: number;
      /**
       * Is Completed
       * @description 检查任务是否已完成
       */
      readonly is_completed: boolean;
      /**
       * Duration Seconds
       * @description 计算任务持续时间（秒）
       */
      readonly duration_seconds: number | null;
    };
    /**
     * BatchProcessingRecord
     * @description 批处理记录详情响应模型
     */
    BatchProcessingRecord: {
      /** Id */
      id: string;
      /** Batch Id */
      batch_id: string;
      /** Project Id */
      project_id?: string | null;
      /** Processing Type */
      processing_type: string;
      /** Status */
      status: string;
      /** Initiated By User Id */
      initiated_by_user_id?: string | null;
      /** Initiated By User Name */
      initiated_by_user_name?: string | null;
      /** Initiated By User Email */
      initiated_by_user_email?: string | null;
      /** Total Tasks */
      total_tasks: number;
      /** Successful Tasks */
      successful_tasks: number;
      /** Failed Tasks */
      failed_tasks: number;
      /** Skipped Tasks */
      skipped_tasks: number;
      /**
       * Max Concurrent Tasks
       * @default 4
       */
      max_concurrent_tasks: number;
      /** Total Processing Time Seconds */
      total_processing_time_seconds: number;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Completed At */
      completed_at?: string | null;
      /**
       * Task Results
       * @default []
       */
      task_results: components['schemas']['BatchTaskResult'][];
      /** Error Summary */
      error_summary?: string | null;
    };
    /**
     * BatchProcessingStats
     * @description 批处理统计信息响应模型
     */
    BatchProcessingStats: {
      /** Total Batches */
      total_batches: number;
      /** Success Rate Percentage */
      success_rate_percentage: number;
      /** Failed Batches */
      failed_batches: number;
      /** Average Processing Time Seconds */
      average_processing_time_seconds: number;
      /** Total Tasks Processed */
      total_tasks_processed: number;
      /** Successful Batches */
      successful_batches: number;
    };
    /**
     * BatchTaskResult
     * @description 批处理任务结果详情
     */
    BatchTaskResult: {
      /** Task Id */
      task_id: string;
      /** Task Name */
      task_name: string;
      /** Status */
      status: string;
      /** Error Message */
      error_message?: string | null;
      /** Findings Count */
      findings_count?: number | null;
      /** Severity */
      severity?: string | null;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Subtask Id */
      subtask_id: string;
      /** Parent Task Id */
      parent_task_id?: string | null;
    };
    /** Body_analyze_video_scenes_api_v1_video_scenes_analyze_post */
    Body_analyze_video_scenes_api_v1_video_scenes_analyze_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /**
       * Detector Type
       * @default adaptive
       */
      detector_type: string;
      /** Threshold */
      threshold?: number | null;
    };
    /** Body_batch_upload_items_api_v1_items_batch_upload_post */
    Body_batch_upload_items_api_v1_items_batch_upload_post: {
      /** Files */
      files: string[];
      /** Project Id */
      project_id?: string | null;
      /** Tags */
      tags?: string | null;
      /** Description */
      description?: string | null;
    };
    /** Body_create_subtask_api_v1_tasks__task_id__subtasks_post */
    Body_create_subtask_api_v1_tasks__task_id__subtasks_post: {
      /** Name */
      name: string;
      /** Description */
      description?: string;
      /**
       * Task Type Str
       * @default picture
       */
      task_type_str: string;
      /**
       * File
       * Format: binary
       */
      file?: string;
    };
    /** Body_create_task_from_uploaded_image_api_v1_projects__project_id__tasks_create_from_image_post */
    Body_create_task_from_uploaded_image_api_v1_projects__project_id__tasks_create_from_image_post: {
      /**
       * Image File
       * Format: binary
       * @description アップロードする画像ファイル
       */
      image_file: string;
      /** Tag Ids */
      tag_ids?: string[] | null;
    };
    /** Body_create_task_from_uploaded_video_api_v1_projects__project_id__tasks_create_from_video_post */
    Body_create_task_from_uploaded_video_api_v1_projects__project_id__tasks_create_from_video_post: {
      /**
       * Video File
       * Format: binary
       * @description アップロードする動画ファイル
       */
      video_file: string;
      /** Tag Ids */
      tag_ids?: string[] | null;
    };
    /** Body_extract_pdf_preview_api_v1_pdf_extract_preview_post */
    Body_extract_pdf_preview_api_v1_pdf_extract_preview_post: {
      /** Session Id */
      session_id: string;
      /**
       * File
       * Format: binary
       */
      file: string;
      /**
       * Thumbnail Size
       * @default 300
       */
      thumbnail_size: number;
      /**
       * Min Size
       * @default 1000
       */
      min_size: number;
      /**
       * Skip Duplicates
       * @default true
       */
      skip_duplicates: boolean;
    };
    /** Body_get_scene_frames_api_v1_video_scenes__scene_number__frames_post */
    Body_get_scene_frames_api_v1_video_scenes__scene_number__frames_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /**
       * Detector Type
       * @default adaptive
       */
      detector_type: string;
    };
    /** Body_get_scene_frames_with_info_api_v1_video_scenes__scene_number__frames_with_info_post */
    Body_get_scene_frames_with_info_api_v1_video_scenes__scene_number__frames_with_info_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /**
       * Detector Type
       * @default adaptive
       */
      detector_type: string;
      /** Threshold */
      threshold?: number | null;
    };
    /** Body_test_rpd_with_image_endpoint_api_v1_review_point_definitions_test_rpd_with_image_post */
    Body_test_rpd_with_image_endpoint_api_v1_review_point_definitions_test_rpd_with_image_post: {
      /**
       * Image File
       * Format: binary
       * @description 要分析的图片文件
       */
      image_file: string;
      /**
       * Rpd Title
       * @description RPD标题
       */
      rpd_title: string;
      /**
       * Rpd Parent Key
       * @description RPD类型: general_ng_review, copyright_review, visual_review
       */
      rpd_parent_key: string;
      /**
       * Rpd Description For Ai
       * @description AI描述（copyright_review和visual_review用）
       */
      rpd_description_for_ai?: string | null;
      /**
       * Rpd Tag List
       * @description 标签列表，用逗号分隔（general_ng_review用）
       */
      rpd_tag_list?: string | null;
      /**
       * Rpd Reference Images
       * @description 参考图片S3路径，用逗号分隔（visual_review用）
       */
      rpd_reference_images?: string | null;
      /**
       * Cr Check
       * @description 是否启用CR检查
       * @default false
       */
      cr_check: boolean;
      /**
       * Mode
       * @description 分析模式: quality 或 speed
       * @default quality
       */
      mode: string;
    };
    /** Body_upload_appellation_file_endpoint_api_v1_review_point_definitions_upload_appellation_file__post */
    Body_upload_appellation_file_endpoint_api_v1_review_point_definitions_upload_appellation_file__post: {
      /**
       * File
       * Format: binary
       * @description 称呼表文件 (Excel .xlsx/.xls 或 JSON)
       */
      file: string;
      /**
       * Project Id
       * @description 项目ID
       */
      project_id: string;
      /**
       * Session Id
       * @description 会话ID（可选，用于临时文件）
       */
      session_id?: string | null;
    };
    /** Body_upload_character_concept_art_image_api_v1_characters__character_id__concept_art_post */
    Body_upload_character_concept_art_image_api_v1_characters__character_id__concept_art_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_upload_character_concept_art_images_batch_api_v1_characters__character_id__concept_art_batch_post */
    Body_upload_character_concept_art_images_batch_api_v1_characters__character_id__concept_art_batch_post: {
      /** Files */
      files: string[];
    };
    /** Body_upload_character_gallery_image_api_v1_characters__character_id__gallery_post */
    Body_upload_character_gallery_image_api_v1_characters__character_id__gallery_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_upload_character_gallery_images_batch_api_v1_characters__character_id__gallery_batch_post */
    Body_upload_character_gallery_images_batch_api_v1_characters__character_id__gallery_batch_post: {
      /** Files */
      files: string[];
    };
    /** Body_upload_character_image_api_v1_characters__character_id__upload_image_post */
    Body_upload_character_image_api_v1_characters__character_id__upload_image_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_upload_document_api_v1_tasks_upload_document_post */
    Body_upload_document_api_v1_tasks_upload_document_post: {
      /** Project Id */
      project_id: string;
      /** Files */
      files: string[];
    };
    /** Body_upload_image_api_v1_assets_images_post */
    Body_upload_image_api_v1_assets_images_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_upload_pptx_api_v1_tasks_upload_pptx_post */
    Body_upload_pptx_api_v1_tasks_upload_pptx_post: {
      /** Project Id */
      project_id: string;
      /** Files */
      files: string[];
    };
    /** Body_upload_project_documents_api_v1_projects__project_id__documents_post */
    Body_upload_project_documents_api_v1_projects__project_id__documents_post: {
      /**
       * File
       * Format: binary
       * @description document file
       */
      file: string;
    };
    /** Body_upload_rpd_reference_image_api_v1_projects__project_id__rpd_reference_images_post */
    Body_upload_rpd_reference_image_api_v1_projects__project_id__rpd_reference_images_post: {
      /**
       * File
       * Format: binary
       * @description RPD reference image file
       */
      file: string;
    };
    /** Body_upload_rpd_reference_images_batch_api_v1_projects__project_id__rpd_reference_images_batch_post */
    Body_upload_rpd_reference_images_batch_api_v1_projects__project_id__rpd_reference_images_batch_post: {
      /**
       * Files
       * @description RPD reference image files
       */
      files: string[];
    };
    /** Body_upload_temp_image_api_v1_assets_temp_images_post */
    Body_upload_temp_image_api_v1_assets_temp_images_post: {
      /** Session Id */
      session_id: string;
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** BoundingBoxDetectionRequest */
    BoundingBoxDetectionRequest: {
      /** Image Url */
      image_url: string;
      /** Subtask Id */
      subtask_id: string;
      /**
       * Limit
       * @default 10
       */
      limit: number;
    };
    /**
     * CharacterCreate
     * @description 用于创建角色的输入模型
     */
    CharacterCreate: {
      /** Name */
      name: string;
      /** Alias */
      alias?: string | null;
      /** Description */
      description?: string | null;
      /** Features */
      features?: string | null;
      /** Image Path */
      image_path?: string | null;
      /** Reference Images */
      reference_images?: string[] | null;
      /** Ip Id */
      ip_id?: string | null;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
    };
    /**
     * CharacterDetail
     * @description 角色模型，用于存储角色信息
     */
    CharacterDetail: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /** Ip */
      ip: (components['schemas']['IP_vvhzw6_leaf'] | null) | null;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /** Associated Rpds */
      associated_rpds: components['schemas']['ReviewPointDefinition_r45ff3_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_6gyanx_leaf'][];
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /** CharacterForReviewSet */
    CharacterForReviewSet: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Thumbnail Url */
      thumbnail_url?: string | null;
    };
    /**
     * CharacterRPDRecommendationsResponse
     * @description Response body for character-based RPD recommendations
     */
    CharacterRPDRecommendationsResponse: {
      /**
       * Character Id
       * Format: uuid
       * @description The ID of the character
       */
      character_id: string;
      /**
       * Character Name
       * @description The name of the character
       */
      character_name: string;
      /**
       * Recommendations
       * @description List of recommended RPDs
       */
      recommendations: components['schemas']['RPDRecommendation'][];
      /**
       * Total Recommendations
       * @description Total number of recommendations
       */
      total_recommendations: number;
    };
    /**
     * CharacterUpdate
     * @description 用于更新角色的输入模型
     */
    CharacterUpdate: {
      /** Name */
      name?: string | null;
      /** Alias */
      alias?: string | null;
      /** Description */
      description?: string | null;
      /** Features */
      features?: string | null;
      /** Image Path */
      image_path?: string | null;
      /** Reference Images */
      reference_images?: string[] | null;
      /** Ip Id */
      ip_id?: string | null;
    };
    /**
     * Character
     * @description 角色模型，用于存储角色信息
     */
    Character_5uffyo_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /** Ip */
      ip: (components['schemas']['IP_s4cbsg_leaf'] | null) | null;
      /** Associated Rpds */
      associated_rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /**
     * Character
     * @description 角色模型，用于存储角色信息
     */
    Character_7ove2y_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /** Ip */
      ip: (components['schemas']['IP_s4cbsg_leaf'] | null) | null;
      /** Associated Rpds */
      associated_rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /**
     * Character
     * @description 角色模型，用于存储角色信息
     */
    Character_hkomuq_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /** Ip */
      ip: (components['schemas']['IP_s4cbsg_leaf'] | null) | null;
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /**
     * Character
     * @description 角色模型，用于存储角色信息
     */
    Character_nnzkbm_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /** Ip */
      ip: (components['schemas']['IP_s4cbsg_leaf'] | null) | null;
      /** Associated Rpds */
      associated_rpds: components['schemas']['ReviewPointDefinition_42finq_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_kocyqy_leaf'][];
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /**
     * Character
     * @description 角色模型，用于存储角色信息
     */
    Character_o5toum_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /** Associated Rpds */
      associated_rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /**
     * Character
     * @description 角色模型，用于存储角色信息
     */
    Character_rstgbl_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Alias */
      alias?: (string | null) | null;
      /** Description */
      description?: (string | null) | null;
      /** Features */
      features?: (string | null) | null;
      /** Image Path */
      image_path?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for character reference images
       */
      reference_images?: (string[] | null) | null;
      /**
       * Concept Art Images
       * @description List of S3 paths for character concept art and design collection images
       */
      concept_art_images?: (string[] | null) | null;
      /**
       * Image Url
       * @description 获取角色图片的URL。依赖于 _image_url 是否被 fetch_image_url 填充。
       */
      readonly image_url: string;
      /**
       * Gallery Image Urls
       * @description 获取角色画廊图片的URL列表。依赖于 _gallery_image_urls 是否被 fetch_gallery_image_urls 填充。
       */
      readonly gallery_image_urls: string[];
      /**
       * Concept Art Image Urls
       * @description 获取角色设定集图片的URL列表。依赖于 _concept_art_image_urls 是否被 fetch_concept_art_image_urls 填充。
       */
      readonly concept_art_image_urls: string[];
    };
    /** CleanupSessionResponse */
    CleanupSessionResponse: {
      /** Deleted Count */
      deleted_count: number;
      /** Deleted Files */
      deleted_files: string[];
    };
    /** ConfirmExtractionRequest */
    ConfirmExtractionRequest: {
      /** Selected Images */
      selected_images: string[];
      /** Project Id */
      project_id?: string | null;
    };
    /** ConfirmExtractionResponse */
    ConfirmExtractionResponse: {
      /** Moved Files */
      moved_files: string[];
      /** Errors */
      errors: string[];
      /** Pdf Id */
      pdf_id: string;
      /** Extracted Items Count */
      extracted_items_count: number;
    };
    /** CropInfo */
    CropInfo: {
      /** X */
      x: number;
      /** Y */
      y: number;
      /** Width */
      width: number;
      /** Height */
      height: number;
    };
    /** Document */
    Document_doemlv_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** File Path */
      file_path: string;
      /** File Name */
      file_name: string;
      /** File Size */
      file_size: number;
      /** File Type */
      file_type?: (string | null) | null;
      /** File Url */
      readonly file_url: string;
    };
    /**
     * DrawingData
     * @description Drawing data from fabric.js canvas
     */
    DrawingData: {
      /** Drawing Data */
      drawing_data: string;
    };
    /**
     * DrawingResponse
     * @description Response after saving drawing
     */
    DrawingResponse: {
      /** Id */
      id: string;
      /** Subtask Id */
      subtask_id: string;
      /** Drawing Data */
      drawing_data: string;
      /** Created At */
      created_at: string;
    };
    /**
     * FileProcessingStatus
     * @description 文件处理状态模型
     */
    FileProcessingStatus: {
      /** Batch Id */
      batch_id: string;
      /** Total Files */
      total_files: number;
      /** Processed Files */
      processed_files: number;
      /** Successful Files */
      successful_files: number;
      /** Failed Files */
      failed_files: number;
      /** Files Status */
      files_status: {
        [key: string]: Record<string, never>;
      };
    };
    /**
     * FindingArea
     * @description Represents a bounding box area for a detected element or finding.
     */
    FindingArea: {
      /** X */
      x: number;
      /** Y */
      y: number;
      /** Width */
      width: number;
      /** Height */
      height: number;
    };
    /** FindingBoundingBoxUpdate */
    FindingBoundingBoxUpdate: {
      area: components['schemas']['FindingArea'];
    };
    /** FindingContentUpdate */
    FindingContentUpdate: {
      /** Description */
      description?: string | null;
      /** Severity */
      severity?: ('risk' | 'alert' | 'safe' | 'high' | 'medium' | 'low') | null;
      /** Suggestion */
      suggestion?: string | null;
    };
    /** FindingFixedStatusUpdate */
    FindingFixedStatusUpdate: {
      /** Is Fixed */
      is_fixed: boolean;
    };
    /** GenerateDescriptionRequest */
    GenerateDescriptionRequest: {
      /** Tag */
      tag: string;
      /** Image Url */
      image_url: string;
    };
    /** GenerateDescriptionResponse */
    GenerateDescriptionResponse: {
      /** Eng Visual Characteristics */
      eng_visual_characteristics: string;
      /** Eng Key Considerations */
      eng_key_considerations: string;
      /** Jpn Visual Characteristics */
      jpn_visual_characteristics: string;
      /** Jpn Key Considerations */
      jpn_key_considerations: string;
    };
    /**
     * GenerateImageDescriptionRequest
     * @description 生成图片详细描述的请求模型
     */
    GenerateImageDescriptionRequest: {
      /** Image Url */
      image_url: string;
      /** Context */
      context?: string | null;
      /**
       * Rpd Type
       * @default general_ng_review
       */
      rpd_type: string;
      /**
       * Rpd Title
       * @default
       */
      rpd_title: string;
    };
    /**
     * GenerateImageDescriptionResponse
     * @description 生成图片详细描述的响应模型
     */
    GenerateImageDescriptionResponse: {
      /** Detailed Description */
      detailed_description: string;
      /** Key Elements */
      key_elements: string[];
      /** Style Analysis */
      style_analysis: string;
      /** Suggested Keywords */
      suggested_keywords: string[];
      /** Confidence */
      confidence: number;
    };
    /**
     * GenerateRPDContentRequest
     * @description 生成完整RPD内容的请求模型
     */
    GenerateRPDContentRequest: {
      /** User Input */
      user_input: string;
      /** Image Url */
      image_url?: string | null;
      /** Context */
      context?: string | null;
    };
    /**
     * GenerateRPDContentResponse
     * @description 生成完整RPD内容的响应模型
     */
    GenerateRPDContentResponse: {
      /** Title */
      title: string;
      /** Description For Ai */
      description_for_ai: string;
      /** Description For Ai Jpn */
      description_for_ai_jpn: string;
      /** Suggested Tag */
      suggested_tag: string;
    };
    /** GenerateRequest */
    GenerateRequest: {
      /** Base Prompt */
      base_prompt: string;
      tags: components['schemas']['GenerationTags'];
      /**
       * Count
       * @default 1
       */
      count: number;
      /**
       * Aspect Ratio
       * @description Image aspect ratio
       * @default 1:1
       */
      aspect_ratio: string;
      /**
       * Negative Prompt
       * @description Things to avoid in generation
       */
      negative_prompt?: string | null;
    };
    /** GeneratedReferenceResponse */
    GeneratedReferenceResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Base Prompt */
      base_prompt: string;
      /** Enhanced Prompt */
      enhanced_prompt: string;
      /** Tags */
      tags: Record<string, never>;
      /** Image Url */
      image_url: string;
      /** Image Path */
      image_path: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * GeneratedReference
     * @description AI-generated reference images - MVP version
     */
    GeneratedReference_qfq5xe_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Base Prompt */
      base_prompt: string;
      /** Enhanced Prompt */
      enhanced_prompt: string;
      /** Image Path */
      image_path: string;
      /** Tags */
      tags: Record<string, never> | unknown[] | null;
      /** Created By */
      created_by: components['schemas']['User_dzz5ed_leaf'];
      /** Image Url */
      readonly image_url: string;
    };
    /**
     * GeneratedReference
     * @description AI-generated reference images - MVP version
     */
    GeneratedReference_z45sk2_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Base Prompt */
      base_prompt: string;
      /** Enhanced Prompt */
      enhanced_prompt: string;
      /** Image Path */
      image_path: string;
      /** Tags */
      tags: Record<string, never> | unknown[] | null;
      /** Created By */
      created_by: components['schemas']['User_rlfvwj_leaf'];
      /** Image Url */
      readonly image_url: string;
    };
    /**
     * GeneratedReference
     * @description AI-generated reference images - MVP version
     */
    GeneratedReference_z4fyu6_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Base Prompt */
      base_prompt: string;
      /** Enhanced Prompt */
      enhanced_prompt: string;
      /** Image Path */
      image_path: string;
      /** Tags */
      tags: Record<string, never> | unknown[] | null;
      /** Image Url */
      readonly image_url: string;
    };
    /**
     * GenerationTags
     * @description 4 basic tag categories only
     */
    GenerationTags: {
      /** Style */
      style?: string | null;
      /** Pose */
      pose?: string | null;
      /** Camera */
      camera?: string | null;
      /** Lighting */
      lighting?: string | null;
    };
    /** GoogleLoginRequest */
    GoogleLoginRequest: {
      /** Token */
      token: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * IPCreate
     * @description 用于创建IP的输入模型
     */
    IPCreate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Project Ids */
      project_ids?: string[] | null;
    };
    /**
     * IPOut
     * @description 知识产権模型，如动漫、游戏等
     */
    IPOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
    };
    /**
     * IPUpdate
     * @description 用于更新IP的输入模型
     */
    IPUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Project Ids */
      project_ids?: string[] | null;
    };
    /**
     * IP
     * @description 知识产権模型，如动漫、游戏等
     */
    IP_s4cbsg_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
    };
    /**
     * IP
     * @description 知识产権模型，如动漫、游戏等
     */
    IP_uld44s_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Characters */
      characters: components['schemas']['Character_o5toum_leaf'][];
    };
    /**
     * IP
     * @description 知识产権模型，如动漫、游戏等
     */
    IP_vvhzw6_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Projects */
      projects: components['schemas']['Project_kgv3ck_leaf'][];
    };
    /**
     * IP
     * @description 知识产権模型，如动漫、游戏等
     */
    IP_wxaswg_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
    };
    /** IllustrationDocContent */
    IllustrationDocContent_k3cltr_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Prompt */
      prompt: string;
      /**
       * Tags
       * @description Tags for the illustration
       */
      tags?: (string[] | null) | null;
      /**
       * Image S3 Path
       * @description S3 path for the generated image
       */
      image_s3_path: string;
    };
    /** IllustrationDoc */
    IllustrationDoc_fc6mi4_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Contents */
      contents: components['schemas']['IllustrationDocContent_k3cltr_leaf'][];
    };
    /** IllustrationDoc */
    IllustrationDoc_mv32nl_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
    };
    /**
     * ImageRPDTestResponse
     * @description 单张图片RPD测试的响应模型
     */
    ImageRPDTestResponse: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
      /** Findings Count */
      findings_count: number;
      /**
       * Findings
       * @default []
       */
      findings: Record<string, never>[];
      /** Processing Time Seconds */
      processing_time_seconds?: number | null;
      /**
       * Rpd Title
       * @default
       */
      rpd_title: string;
      /**
       * Rpd Type
       * @default
       */
      rpd_type: string;
    };
    /** ImageSearchRequest */
    ImageSearchRequest: {
      /** Image Url */
      image_url: string;
      /**
       * Limit
       * @default 20
       */
      limit: number;
      crop?: components['schemas']['CropInfo'] | null;
    };
    /**
     * ItemResponse
     * @description Item response model
     */
    ItemResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Filename */
      filename: string;
      /** S3 Path */
      s3_path: string;
      /** S3 Url */
      s3_url?: string | null;
      /** Image Url */
      image_url: string;
      /** Content Type */
      content_type?: string | null;
      /** File Size */
      file_size?: number | null;
      /** Tags */
      tags?: string[] | null;
      /** Description */
      description?: string | null;
      /** Project Id */
      project_id?: string | null;
      /**
       * Uploaded By
       * Format: uuid
       */
      uploaded_by: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Source Type
       * @default direct_upload
       */
      source_type: string;
      /** Source Pdf Id */
      source_pdf_id?: string | null;
      /** Pdf Page Number */
      pdf_page_number?: number | null;
      /** Pdf Image Index */
      pdf_image_index?: number | null;
    };
    /**
     * ItemUpdate
     * @description 用于更新Item的输入模型
     */
    ItemUpdate: {
      /** Filename */
      filename?: string | null;
      /** Tags */
      tags?: string[] | null;
      /** Description */
      description?: string | null;
      /** Project Id */
      project_id?: string | null;
    };
    /**
     * Item
     * @description Item model for storing uploaded images and their metadata
     */
    Item_dzsgnk_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original filename of the uploaded image
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the image is stored
       */
      s3_path: string;
      /**
       * S3 Url
       * @description Pre-signed S3 URL for accessing the image
       */
      s3_url?: (string | null) | null;
      /**
       * Content Type
       * @description MIME type of the uploaded file
       */
      content_type?: (string | null) | null;
      /**
       * File Size
       * @description File size in bytes
       */
      file_size?: (number | null) | null;
      /**
       * Tags
       * @description Tags associated with the item
       */
      tags?: (string[] | null) | null;
      /**
       * Description
       * @description Description of the item
       */
      description?: (string | null) | null;
      /**
       * Uploaded By
       * @description User who uploaded this item
       */
      uploaded_by: components['schemas']['User_rlfvwj_leaf'];
      /**
       * Source Type
       * @description Source type: direct_upload | pdf_extracted
       * @default direct_upload
       */
      source_type: string | null;
      /**
       * Source Pdf
       * @description Source PDF if this item was extracted from a PDF
       */
      source_pdf: (components['schemas']['PDF_bjp5ln_leaf'] | null) | null;
      /**
       * Pdf Page Number
       * @description PDF page number (1-based) if extracted from PDF
       */
      pdf_page_number?: (number | null) | null;
      /**
       * Pdf Image Index
       * @description Image index within the PDF page (0-based) if extracted from PDF
       */
      pdf_image_index?: (number | null) | null;
      /**
       * Image Url
       * @description Get the image URL. Depends on _image_url being filled by fetch_image_url
       */
      readonly image_url: string;
    };
    /**
     * Item
     * @description Item model for storing uploaded images and their metadata
     */
    Item_gluoye_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original filename of the uploaded image
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the image is stored
       */
      s3_path: string;
      /**
       * S3 Url
       * @description Pre-signed S3 URL for accessing the image
       */
      s3_url?: (string | null) | null;
      /**
       * Content Type
       * @description MIME type of the uploaded file
       */
      content_type?: (string | null) | null;
      /**
       * File Size
       * @description File size in bytes
       */
      file_size?: (number | null) | null;
      /**
       * Tags
       * @description Tags associated with the item
       */
      tags?: (string[] | null) | null;
      /**
       * Description
       * @description Description of the item
       */
      description?: (string | null) | null;
      /**
       * Project
       * @description Project this item belongs to
       */
      project: (components['schemas']['Project_ff7gsz_leaf'] | null) | null;
      /**
       * Source Type
       * @description Source type: direct_upload | pdf_extracted
       * @default direct_upload
       */
      source_type: string | null;
      /**
       * Pdf Page Number
       * @description PDF page number (1-based) if extracted from PDF
       */
      pdf_page_number?: (number | null) | null;
      /**
       * Pdf Image Index
       * @description Image index within the PDF page (0-based) if extracted from PDF
       */
      pdf_image_index?: (number | null) | null;
      /**
       * Image Url
       * @description Get the image URL. Depends on _image_url being filled by fetch_image_url
       */
      readonly image_url: string;
    };
    /**
     * Item
     * @description Item model for storing uploaded images and their metadata
     */
    Item_gqpbj2_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original filename of the uploaded image
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the image is stored
       */
      s3_path: string;
      /**
       * S3 Url
       * @description Pre-signed S3 URL for accessing the image
       */
      s3_url?: (string | null) | null;
      /**
       * Content Type
       * @description MIME type of the uploaded file
       */
      content_type?: (string | null) | null;
      /**
       * File Size
       * @description File size in bytes
       */
      file_size?: (number | null) | null;
      /**
       * Tags
       * @description Tags associated with the item
       */
      tags?: (string[] | null) | null;
      /**
       * Description
       * @description Description of the item
       */
      description?: (string | null) | null;
      /**
       * Uploaded By
       * @description User who uploaded this item
       */
      uploaded_by: components['schemas']['User_ogi2t2_leaf'];
      /**
       * Source Type
       * @description Source type: direct_upload | pdf_extracted
       * @default direct_upload
       */
      source_type: string | null;
      /**
       * Source Pdf
       * @description Source PDF if this item was extracted from a PDF
       */
      source_pdf: (components['schemas']['PDF_7zl6yd_leaf'] | null) | null;
      /**
       * Pdf Page Number
       * @description PDF page number (1-based) if extracted from PDF
       */
      pdf_page_number?: (number | null) | null;
      /**
       * Pdf Image Index
       * @description Image index within the PDF page (0-based) if extracted from PDF
       */
      pdf_image_index?: (number | null) | null;
      /**
       * Image Url
       * @description Get the image URL. Depends on _image_url being filled by fetch_image_url
       */
      readonly image_url: string;
    };
    /**
     * Item
     * @description Item model for storing uploaded images and their metadata
     */
    Item_ksfl6y_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original filename of the uploaded image
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the image is stored
       */
      s3_path: string;
      /**
       * S3 Url
       * @description Pre-signed S3 URL for accessing the image
       */
      s3_url?: (string | null) | null;
      /**
       * Content Type
       * @description MIME type of the uploaded file
       */
      content_type?: (string | null) | null;
      /**
       * File Size
       * @description File size in bytes
       */
      file_size?: (number | null) | null;
      /**
       * Tags
       * @description Tags associated with the item
       */
      tags?: (string[] | null) | null;
      /**
       * Description
       * @description Description of the item
       */
      description?: (string | null) | null;
      /**
       * Uploaded By
       * @description User who uploaded this item
       */
      uploaded_by: components['schemas']['User_rlfvwj_leaf'];
      /**
       * Source Type
       * @description Source type: direct_upload | pdf_extracted
       * @default direct_upload
       */
      source_type: string | null;
      /**
       * Pdf Page Number
       * @description PDF page number (1-based) if extracted from PDF
       */
      pdf_page_number?: (number | null) | null;
      /**
       * Pdf Image Index
       * @description Image index within the PDF page (0-based) if extracted from PDF
       */
      pdf_image_index?: (number | null) | null;
      /**
       * Image Url
       * @description Get the image URL. Depends on _image_url being filled by fetch_image_url
       */
      readonly image_url: string;
    };
    /**
     * Item
     * @description Item model for storing uploaded images and their metadata
     */
    Item_ops744_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original filename of the uploaded image
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the image is stored
       */
      s3_path: string;
      /**
       * S3 Url
       * @description Pre-signed S3 URL for accessing the image
       */
      s3_url?: (string | null) | null;
      /**
       * Content Type
       * @description MIME type of the uploaded file
       */
      content_type?: (string | null) | null;
      /**
       * File Size
       * @description File size in bytes
       */
      file_size?: (number | null) | null;
      /**
       * Tags
       * @description Tags associated with the item
       */
      tags?: (string[] | null) | null;
      /**
       * Description
       * @description Description of the item
       */
      description?: (string | null) | null;
      /**
       * Source Type
       * @description Source type: direct_upload | pdf_extracted
       * @default direct_upload
       */
      source_type: string | null;
      /**
       * Pdf Page Number
       * @description PDF page number (1-based) if extracted from PDF
       */
      pdf_page_number?: (number | null) | null;
      /**
       * Pdf Image Index
       * @description Image index within the PDF page (0-based) if extracted from PDF
       */
      pdf_image_index?: (number | null) | null;
      /**
       * Image Url
       * @description Get the image URL. Depends on _image_url being filled by fetch_image_url
       */
      readonly image_url: string;
    };
    /**
     * LatestExecutedRPD
     * @description 最近执行的RPD信息
     */
    LatestExecutedRPD: {
      /**
       * Rpd Key
       * @description RPD标识符
       */
      rpd_key: string;
      /**
       * Rpd Title
       * @description RPD标题
       */
      rpd_title: string;
      /**
       * Version Number
       * @description RPD版本号
       */
      version_number: number;
      /**
       * Executed At
       * Format: date-time
       * @description 执行时间
       */
      executed_at: string;
      /**
       * Ai Review Version
       * @description AI审核版本号
       */
      ai_review_version: number;
      /**
       * Finding Count
       * @description 发现的问题数量
       */
      finding_count: number;
    };
    /**
     * LatestExecutedRPDsResponse
     * @description 最近执行的RPD列表响应
     */
    LatestExecutedRPDsResponse: {
      /**
       * Ai Review Version
       * @description AI审核版本号
       */
      ai_review_version?: number | null;
      /**
       * Executed At
       * @description 执行时间
       */
      executed_at?: string | null;
      /**
       * Executed Rpds
       * @description 执行的RPD列表
       */
      executed_rpds?: components['schemas']['LatestExecutedRPD'][];
      /**
       * Total Findings
       * @description 总发现问题数
       * @default 0
       */
      total_findings: number;
    };
    /**
     * LikedImageRemoveRequest
     * @description Request schema for removing liked images
     */
    LikedImageRemoveRequest: {
      /**
       * Image Path
       * @description S3 path/key for the image
       */
      image_path: string;
      /**
       * Source Type
       * @description Type of source object
       */
      source_type: string;
      /**
       * Source Id
       * Format: uuid
       * @description UUID of the source object
       */
      source_id: string;
    };
    /**
     * LikedImageRequest
     * @description Request schema for adding liked images with source tracking
     */
    LikedImageRequest: {
      /**
       * Image Path
       * @description S3 path/key for the image
       */
      image_path: string;
      /**
       * Source Type
       * @description Type of source object
       */
      source_type: string;
      /**
       * Source Id
       * Format: uuid
       * @description UUID of the source object
       */
      source_id: string;
      /**
       * Display Name
       * @description Optional display name
       */
      display_name?: string | null;
      /**
       * Tags
       * @description Optional tags
       * @default []
       */
      tags: string[] | null;
    };
    /**
     * LikedImageResponse
     * @description Response schema for liked images with fresh URLs
     */
    LikedImageResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Image Path */
      image_path: string;
      /** Image Url */
      image_url: string;
      /** Source Type */
      source_type: string;
      /**
       * Source Id
       * Format: uuid
       */
      source_id: string;
      /** Display Name */
      display_name?: string | null;
      /** Tags */
      tags?: string[];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * LikedImage
     * @description Liked images with proper S3 path storage and polymorphic source tracking
     */
    LikedImage_xn5xrn_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Image Path
       * @description S3 path/key for the liked image
       */
      image_path: string;
      /**
       * Source Type
       * @description Type of source object (character, item, generated_reference, etc.)
       */
      source_type: string;
      /**
       * Source Id
       * Format: uuid
       * @description UUID of the source object that contains this image
       */
      source_id: string;
      /**
       * Display Name
       * @description Optional display name for the liked image
       */
      display_name?: (string | null) | null;
      /**
       * Tags
       * @description Optional tags for categorizing liked images
       */
      tags?: (string[] | null) | null;
      /**
       * Image Url
       * @description Get the image URL. Depends on _image_url being filled by fetch_image_url
       */
      readonly image_url: string;
    };
    /** LoginResponse */
    LoginResponse: {
      /** User Id */
      user_id: string;
    };
    /** Organization */
    Organization_kywcwu_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
    };
    /** Organization */
    Organization_loe2jr_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Domain */
      domain?: (string | null) | null;
      /** Members */
      members: components['schemas']['User_rlfvwj_leaf'][];
      /** Admins */
      admins: components['schemas']['User_rlfvwj_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_qapfh7_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_kfi3op_leaf'][];
    };
    /** Organization */
    Organization_xbred3_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Domain */
      domain?: (string | null) | null;
    };
    /** PDFExtractionPreviewResponse */
    PDFExtractionPreviewResponse: {
      /** Session Id */
      session_id: string;
      /** Total Pages */
      total_pages: number;
      /** Total Images Found */
      total_images_found: number;
      /** Images Extracted */
      images_extracted: number;
      /** Duplicates Skipped */
      duplicates_skipped: number;
      /** Small Images Skipped */
      small_images_skipped: number;
      /** Errors */
      errors: string[];
      /** Extracted Images */
      extracted_images: components['schemas']['PDFImageInfo'][];
    };
    /** PDFImageInfo */
    PDFImageInfo: {
      /** Filename */
      filename: string;
      /** Original Filename */
      original_filename: string;
      /** Page */
      page: number;
      /** Index */
      index: number;
      /** Size Bytes */
      size_bytes: number;
      /** Format */
      format: string;
      /** Hash */
      hash: string;
      /** Dimensions */
      dimensions: string;
      /** Position */
      position?: {
        [key: string]: number;
      } | null;
      /** Thumbnail Url */
      thumbnail_url: string;
      /** Candidates Tried */
      candidates_tried: string[];
      /** Thumbnail Size Bytes */
      thumbnail_size_bytes: number;
    };
    /**
     * PDFResponse
     * @description PDF response model
     */
    PDFResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Filename */
      filename: string;
      /** S3 Path */
      s3_path: string;
      /** File Size */
      file_size: number;
      /** Total Pages */
      total_pages: number;
      /** Extraction Session Id */
      extraction_session_id?: string | null;
      /**
       * Extracted At
       * Format: date-time
       */
      extracted_at: string;
      /** Extraction Method */
      extraction_method: string;
      /** Extraction Stats */
      extraction_stats?: Record<string, never> | null;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Uploaded By
       * Format: uuid
       */
      uploaded_by: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * PDF
     * @description PDF model for storing uploaded PDF files and their extraction metadata
     */
    PDF_7zl6yd_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original PDF filename
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the PDF is stored
       */
      s3_path: string;
      /**
       * File Size
       * @description PDF file size in bytes
       */
      file_size: number;
      /**
       * Total Pages
       * @description Total number of pages in PDF
       */
      total_pages: number;
      /**
       * Extraction Session Id
       * @description Session ID used during extraction
       */
      extraction_session_id?: (string | null) | null;
      /**
       * Extracted At
       * Format: date-time
       * @description When the PDF was processed for extraction
       */
      extracted_at: string;
      /**
       * Extraction Method
       * @description Method used for extraction
       * @default pymupdf
       */
      extraction_method: string | null;
      /**
       * Extraction Stats
       * @description Statistics from the extraction process
       */
      extraction_stats?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Uploaded By
       * @description User who uploaded this PDF
       */
      uploaded_by: components['schemas']['User_rlfvwj_leaf'];
    };
    /**
     * PDF
     * @description PDF model for storing uploaded PDF files and their extraction metadata
     */
    PDF_bjp5ln_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original PDF filename
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the PDF is stored
       */
      s3_path: string;
      /**
       * File Size
       * @description PDF file size in bytes
       */
      file_size: number;
      /**
       * Total Pages
       * @description Total number of pages in PDF
       */
      total_pages: number;
      /**
       * Extraction Session Id
       * @description Session ID used during extraction
       */
      extraction_session_id?: (string | null) | null;
      /**
       * Extracted At
       * Format: date-time
       * @description When the PDF was processed for extraction
       */
      extracted_at: string;
      /**
       * Extraction Method
       * @description Method used for extraction
       * @default pymupdf
       */
      extraction_method: string | null;
      /**
       * Extraction Stats
       * @description Statistics from the extraction process
       */
      extraction_stats?: (Record<string, never> | unknown[] | null) | null;
    };
    /**
     * PDF
     * @description PDF model for storing uploaded PDF files and their extraction metadata
     */
    PDF_d3hw5m_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original PDF filename
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the PDF is stored
       */
      s3_path: string;
      /**
       * File Size
       * @description PDF file size in bytes
       */
      file_size: number;
      /**
       * Total Pages
       * @description Total number of pages in PDF
       */
      total_pages: number;
      /**
       * Extraction Session Id
       * @description Session ID used during extraction
       */
      extraction_session_id?: (string | null) | null;
      /**
       * Extracted At
       * Format: date-time
       * @description When the PDF was processed for extraction
       */
      extracted_at: string;
      /**
       * Extraction Method
       * @description Method used for extraction
       * @default pymupdf
       */
      extraction_method: string | null;
      /**
       * Extraction Stats
       * @description Statistics from the extraction process
       */
      extraction_stats?: (Record<string, never> | unknown[] | null) | null;
      /** @description Project this PDF belongs to */
      project: components['schemas']['Project_s5dnc2_leaf'];
      /**
       * Extracted Items
       * @description Source PDF if this item was extracted from a PDF
       */
      extracted_items: components['schemas']['Item_gluoye_leaf'][];
    };
    /**
     * PDF
     * @description PDF model for storing uploaded PDF files and their extraction metadata
     */
    PDF_i63z5k_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original PDF filename
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the PDF is stored
       */
      s3_path: string;
      /**
       * File Size
       * @description PDF file size in bytes
       */
      file_size: number;
      /**
       * Total Pages
       * @description Total number of pages in PDF
       */
      total_pages: number;
      /**
       * Extraction Session Id
       * @description Session ID used during extraction
       */
      extraction_session_id?: (string | null) | null;
      /**
       * Extracted At
       * Format: date-time
       * @description When the PDF was processed for extraction
       */
      extracted_at: string;
      /**
       * Extraction Method
       * @description Method used for extraction
       * @default pymupdf
       */
      extraction_method: string | null;
      /**
       * Extraction Stats
       * @description Statistics from the extraction process
       */
      extraction_stats?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Uploaded By
       * @description User who uploaded this PDF
       */
      uploaded_by: components['schemas']['User_rlfvwj_leaf'];
      /**
       * Extracted Items
       * @description Source PDF if this item was extracted from a PDF
       */
      extracted_items: components['schemas']['Item_ops744_leaf'][];
    };
    /**
     * PDF
     * @description PDF model for storing uploaded PDF files and their extraction metadata
     */
    PDF_kyoraq_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original PDF filename
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the PDF is stored
       */
      s3_path: string;
      /**
       * File Size
       * @description PDF file size in bytes
       */
      file_size: number;
      /**
       * Total Pages
       * @description Total number of pages in PDF
       */
      total_pages: number;
      /**
       * Extraction Session Id
       * @description Session ID used during extraction
       */
      extraction_session_id?: (string | null) | null;
      /**
       * Extracted At
       * Format: date-time
       * @description When the PDF was processed for extraction
       */
      extracted_at: string;
      /**
       * Extraction Method
       * @description Method used for extraction
       * @default pymupdf
       */
      extraction_method: string | null;
      /**
       * Extraction Stats
       * @description Statistics from the extraction process
       */
      extraction_stats?: (Record<string, never> | unknown[] | null) | null;
      /**
       * Uploaded By
       * @description User who uploaded this PDF
       */
      uploaded_by: components['schemas']['User_wk7sxb_leaf'];
      /**
       * Extracted Items
       * @description Source PDF if this item was extracted from a PDF
       */
      extracted_items: components['schemas']['Item_ksfl6y_leaf'][];
    };
    /**
     * PDF
     * @description PDF model for storing uploaded PDF files and their extraction metadata
     */
    PDF_pmtqyp_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Filename
       * @description Original PDF filename
       */
      filename: string;
      /**
       * S3 Path
       * @description S3 path where the PDF is stored
       */
      s3_path: string;
      /**
       * File Size
       * @description PDF file size in bytes
       */
      file_size: number;
      /**
       * Total Pages
       * @description Total number of pages in PDF
       */
      total_pages: number;
      /**
       * Extraction Session Id
       * @description Session ID used during extraction
       */
      extraction_session_id?: (string | null) | null;
      /**
       * Extracted At
       * Format: date-time
       * @description When the PDF was processed for extraction
       */
      extracted_at: string;
      /**
       * Extraction Method
       * @description Method used for extraction
       * @default pymupdf
       */
      extraction_method: string | null;
      /**
       * Extraction Stats
       * @description Statistics from the extraction process
       */
      extraction_stats?: (Record<string, never> | unknown[] | null) | null;
      /** @description Project this PDF belongs to */
      project: components['schemas']['Project_ff7gsz_leaf'];
      /**
       * Extracted Items
       * @description Source PDF if this item was extracted from a PDF
       */
      extracted_items: components['schemas']['Item_ops744_leaf'][];
    };
    /** Page[AssetOut] */
    Page_AssetOut_: {
      /** Items */
      items: components['schemas']['AssetOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[ItemResponse] */
    Page_ItemResponse_: {
      /** Items */
      items: components['schemas']['ItemResponse'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[ProjectOut] */
    Page_ProjectOut_: {
      /** Items */
      items: components['schemas']['ProjectOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[ProjectSimpleOut] */
    Page_ProjectSimpleOut_: {
      /** Items */
      items: components['schemas']['ProjectSimpleOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[SubtaskAnnotation] */
    Page_SubtaskAnnotation_: {
      /** Items */
      items: components['schemas']['SubtaskAnnotation'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[SubtaskOut] */
    Page_SubtaskOut_: {
      /** Items */
      items: components['schemas']['SubtaskOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[TaskKanbanOrderOut] */
    Page_TaskKanbanOrderOut_: {
      /** Items */
      items: components['schemas']['TaskKanbanOrderOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[TaskPriorityOut] */
    Page_TaskPriorityOut_: {
      /** Items */
      items: components['schemas']['TaskPriorityOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[TaskStatusOut] */
    Page_TaskStatusOut_: {
      /** Items */
      items: components['schemas']['TaskStatusOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[UserAdminListOut] */
    Page_UserAdminListOut_: {
      /** Items */
      items: components['schemas']['UserAdminListOut'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** ProcessPPTXResponse */
    ProcessPPTXResponse: {
      /** Asset Id */
      asset_id: string;
      /** Status */
      status: string;
    };
    /** ProjectIn */
    ProjectIn: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Owner Org Id
       * Format: uuid
       */
      owner_org_id: string;
    };
    /** ProjectOut */
    ProjectOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Assets */
      assets: components['schemas']['Asset_ygubkn_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_vaw7qt_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_nnzkbm_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_qfq5xe_leaf'][];
      /** Related Ips */
      related_ips: components['schemas']['IP_uld44s_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_gqpbj2_leaf'][];
      /**
       * Pdfs
       * @description Project this PDF belongs to
       */
      pdfs: components['schemas']['PDF_kyoraq_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Point Definitions */
      review_point_definitions: components['schemas']['ReviewPointDefinition_gfcsr4_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_xlj7hq_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_rpbcgt_leaf'][];
    };
    /** ProjectSimpleOut */
    ProjectSimpleOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
    };
    /** Project */
    Project_657ngw_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_loe2jr_leaf'];
      /** Coop Orgs */
      coop_orgs: components['schemas']['Organization_loe2jr_leaf'][];
      /** Coop Members */
      coop_members: components['schemas']['User_tb4km4_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_bsm5s6_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_iu25nj_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_bx6yub_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_7ove2y_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z45sk2_leaf'][];
      /** Related Ips */
      related_ips: components['schemas']['IP_wxaswg_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_dzsgnk_leaf'][];
      /**
       * Pdfs
       * @description Project this PDF belongs to
       */
      pdfs: components['schemas']['PDF_i63z5k_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Point Definitions */
      review_point_definitions: components['schemas']['ReviewPointDefinition_ohzkjs_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_4n4zx5_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_xgjixn_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_6rc2r6_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_prgcp2_leaf'][];
    };
    /** Project */
    Project_feg3u3_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Coop Orgs */
      coop_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Coop Members */
      coop_members: components['schemas']['User_rlfvwj_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_kfi3op_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_qapfh7_leaf'][];
      /** Assets */
      assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /** Related Ips */
      related_ips: components['schemas']['IP_s4cbsg_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Pdfs
       * @description Project this PDF belongs to
       */
      pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Point Definitions */
      review_point_definitions: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_y2r4ew_leaf'][];
    };
    /** Project */
    Project_ff7gsz_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
    };
    /** Project */
    Project_kgv3ck_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Coop Orgs */
      coop_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Coop Members */
      coop_members: components['schemas']['User_rlfvwj_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_kfi3op_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_qapfh7_leaf'][];
      /** Assets */
      assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Pdfs
       * @description Project this PDF belongs to
       */
      pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Point Definitions */
      review_point_definitions: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_y2r4ew_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** Project */
    Project_n6f5tk_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Coop Orgs */
      coop_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Coop Members */
      coop_members: components['schemas']['User_rlfvwj_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_kfi3op_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_qapfh7_leaf'][];
      /** Assets */
      assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /** Related Ips */
      related_ips: components['schemas']['IP_s4cbsg_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Pdfs
       * @description Project this PDF belongs to
       */
      pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Point Definitions */
      review_point_definitions: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_y2r4ew_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** Project */
    Project_qf4dgk_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Coop Orgs */
      coop_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Coop Members */
      coop_members: components['schemas']['User_rlfvwj_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_kfi3op_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_qapfh7_leaf'][];
      /** Assets */
      assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /** Related Ips */
      related_ips: components['schemas']['IP_s4cbsg_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Pdfs
       * @description Project this PDF belongs to
       */
      pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_y2r4ew_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** Project */
    Project_s5dnc2_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Coop Orgs */
      coop_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Status Candidates */
      status_candidates: components['schemas']['TaskStatus_kfi3op_leaf'][];
      /** Priority Candidates */
      priority_candidates: components['schemas']['TaskPriority_qapfh7_leaf'][];
      /** Assets */
      assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Batch Jobs
       * @description 关联的项目
       */
      batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
      /** Documents */
      documents: components['schemas']['Document_doemlv_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /** Related Ips */
      related_ips: components['schemas']['IP_s4cbsg_leaf'][];
      /**
       * Items
       * @description Project this item belongs to
       */
      items: components['schemas']['Item_ops744_leaf'][];
      /** Prompts */
      prompts: components['schemas']['Prompt_qkmlty_leaf'][];
      /** Review Point Definitions */
      review_point_definitions: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_y2r4ew_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** PromoteTempImagesRequest */
    PromoteTempImagesRequest: {
      /** Project Id */
      project_id: string;
    };
    /** PromoteTempImagesResponse */
    PromoteTempImagesResponse: {
      /** Moved Files */
      moved_files: string[];
      /** Errors */
      errors: string[];
    };
    /** PromotedFinding */
    PromotedFinding_pkcm32_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Subtask Id Context
       * Format: uuid
       * @description Stores the UUID of the Subtask for context, not a direct FK to allow Subtask deletion without affecting KB.
       */
      subtask_id_context: string;
      /**
       * Promotion Timestamp
       * Format: date-time
       */
      readonly promotion_timestamp: string;
      /** Notes */
      notes?: (string | null) | null;
      /** Tags */
      tags?: (Record<string, never> | unknown[] | null) | null;
      /** Sharing Scope */
      sharing_scope?: (string | null) | null;
    };
    /**
     * PromptRewriteRequest
     * @description 用于prompt转写请求的输入模型
     */
    PromptRewriteRequest: {
      /**
       * Original Prompt
       * @description 用户输入的原始prompt
       */
      original_prompt: string;
      /**
       * Context
       * @description 可选的上下文信息，例如项目描述、任务类型等
       */
      context?: string | null;
      /**
       * Rpd Type
       * @description RPD类型
       */
      rpd_type: string;
      /**
       * Target Language
       * @description 目标语言
       * @default english
       */
      target_language: ('japanese' | 'english' | 'chinese') | null;
      /**
       * Image Url
       * @description 图片URL（可选）
       */
      image_url?: string | null;
    };
    /**
     * PromptRewriteResponse
     * @description Prompt转写响应模型
     */
    PromptRewriteResponse: {
      /**
       * Original Prompt
       * @description 用户输入的原始prompt
       */
      original_prompt: string;
      /**
       * Rewritten Prompt
       * @description AI转写后的完整prompt
       */
      rewritten_prompt: string;
      /**
       * Rewritten Prompt Jpn
       * @description AI转写后的完整prompt（日文）
       */
      rewritten_prompt_jpn: string;
      /**
       * Confidence
       * @description 转写质量的置信度评分
       */
      confidence: number;
    };
    /** Prompt */
    Prompt_qkmlty_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Content */
      content: string;
    };
    /** RPDForReviewSet */
    RPDForReviewSet: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Key */
      key: string;
      /** Current Version Title */
      current_version_title?: string | null;
    };
    /**
     * RPDRecommendation
     * @description RPD recommendation based on character
     */
    RPDRecommendation: {
      /**
       * Rpd Id
       * Format: uuid
       * @description The ID of the recommended RPD
       */
      rpd_id: string;
      /**
       * Rpd Title
       * @description The title of the recommended RPD
       */
      rpd_title: string;
      /**
       * Rpd Key
       * @description The key of the recommended RPD
       */
      rpd_key: string;
      /**
       * Reason
       * @description Reason for recommendation
       */
      reason: string;
    };
    /** RPDStatusUpdate */
    RPDStatusUpdate: {
      /** Is Active */
      is_active: boolean;
    };
    /** Rect */
    Rect: {
      /** Width */
      width: number;
      /** Height */
      height: number;
      /** X */
      x: number;
      /** Y */
      y: number;
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition: {
      /**
       * Key
       * @enum {string}
       */
      key:
        | 'general_ng_review'
        | 'visual_review'
        | 'settings_review'
        | 'design_review'
        | 'text_review'
        | 'copyright_review';
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Versions */
      versions?: components['schemas']['ReviewPointDefinitionVersionInDB'][];
      current_version?: components['schemas']['ReviewPointDefinitionVersionInDB'] | null;
      /** Current Version Num */
      current_version_num?: number | null;
    };
    /** ReviewPointDefinitionCreate */
    ReviewPointDefinitionCreate: {
      /**
       * Key
       * @enum {string}
       */
      key:
        | 'general_ng_review'
        | 'visual_review'
        | 'settings_review'
        | 'design_review'
        | 'text_review'
        | 'copyright_review';
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /** Title */
      title: string;
      /**
       * User Instruction
       * @description User instruction for AI review
       */
      user_instruction: string;
      /**
       * Description For Ai
       * @description Optional, will be generated from user_instruction if not provided
       */
      description_for_ai?: string | null;
      /**
       * Ai Description Groups
       * @description Groups of AI descriptions for general_ng_review
       */
      ai_description_groups?: Record<string, never>[] | null;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Reference Images
       * @description List of S3 paths for reference images for the initial version
       * @default []
       */
      reference_images: string[] | null;
      /**
       * Tag List
       * @description List of tags for NG review filtering
       * @default []
       */
      tag_list: string[] | null;
      /**
       * Reference Files
       * @description List of S3 URLs for reference files (e.g., appellation table for text_review)
       * @default []
       */
      reference_files: string[] | null;
      /**
       * Special Rules
       * @description Special rules in JSON format: [{'speaker': '角色A', 'target': '角色B', 'alias': '特殊称呼', 'conditions': ['条件1', '条件2']}]
       * @default []
       */
      special_rules: Record<string, never>[] | null;
      /**
       * Ng Subcategory
       * @description Subcategory for general_ng_review: 'concrete_shape' (具体形状) or 'abstract_type' (抽象类型)
       */
      ng_subcategory?: ('concrete_shape' | 'abstract_type') | null;
    };
    /** ReviewPointDefinitionVersionBase */
    ReviewPointDefinitionVersionBase: {
      /** Title */
      title: string;
      /**
       * User Instruction
       * @description User instruction for AI review
       */
      user_instruction?: string | null;
      /**
       * Description For Ai
       * @description generated prompt for AI review
       */
      description_for_ai?: string | null;
      /**
       * Is Active Version
       * @default true
       */
      is_active_version: boolean;
      /**
       * Reference Images
       * @description List of S3 paths for reference images that provide visual context and guidance for AI reviews
       * @default []
       */
      reference_images: string[] | null;
      /**
       * Tag List
       * @description List of tags for NG review filtering
       * @default []
       */
      tag_list: string[] | null;
      /**
       * Reference Files
       * @description List of S3 URLs for reference files (e.g., appellation table for text_review)
       * @default []
       */
      reference_files: string[] | null;
      /**
       * Special Rules
       * @description Special rules in JSON format: [{'speaker': '角色A', 'target': '角色B', 'alias': '特殊称呼', 'conditions': ['条件1', '条件2']}]
       * @default []
       */
      special_rules: Record<string, never>[] | null;
      /**
       * Ng Subcategory
       * @description Subcategory for general_ng_review: 'concrete_shape' (具体形状) or 'abstract_type' (抽象类型)
       */
      ng_subcategory?: ('concrete_shape' | 'abstract_type') | null;
      /**
       * Rpd Type
       * @description RPD classification type (e.g., 'right/wrong tasks', 'classification tasks', etc.)
       */
      rpd_type?: string | null;
      /**
       * Guidelines
       * @description AI-generated guidelines for the review
       */
      guidelines?: Record<string, never> | null;
      /**
       * Constraints
       * @description AI-generated constraints for the review
       */
      constraints?: Record<string, never> | null;
      /**
       * Detector
       * @description AI-generated detector prompt for the review
       */
      detector?: string | null;
      /**
       * Assessor
       * @description AI-generated assessor prompt for the review
       */
      assessor?: string | null;
      /**
       * Is Ready For Ai Review
       * @description Whether this RPD version has been preprocessed and is ready for AI review
       * @default false
       */
      is_ready_for_ai_review: boolean;
    };
    /** ReviewPointDefinitionVersionInDB */
    ReviewPointDefinitionVersionInDB: {
      /** Title */
      title: string;
      /**
       * User Instruction
       * @description User instruction for AI review
       */
      user_instruction?: string | null;
      /**
       * Description For Ai
       * @description generated prompt for AI review
       */
      description_for_ai?: string | null;
      /**
       * Is Active Version
       * @default true
       */
      is_active_version: boolean;
      /**
       * Reference Images
       * @description List of S3 paths for reference images that provide visual context and guidance for AI reviews
       * @default []
       */
      reference_images: string[] | null;
      /**
       * Tag List
       * @description List of tags for NG review filtering
       * @default []
       */
      tag_list: string[] | null;
      /**
       * Reference Files
       * @description List of S3 URLs for reference files (e.g., appellation table for text_review)
       * @default []
       */
      reference_files: string[] | null;
      /**
       * Special Rules
       * @description Special rules in JSON format: [{'speaker': '角色A', 'target': '角色B', 'alias': '特殊称呼', 'conditions': ['条件1', '条件2']}]
       * @default []
       */
      special_rules: Record<string, never>[] | null;
      /**
       * Ng Subcategory
       * @description Subcategory for general_ng_review: 'concrete_shape' (具体形状) or 'abstract_type' (抽象类型)
       */
      ng_subcategory?: ('concrete_shape' | 'abstract_type') | null;
      /**
       * Rpd Type
       * @description RPD classification type (e.g., 'right/wrong tasks', 'classification tasks', etc.)
       */
      rpd_type?: string | null;
      /**
       * Guidelines
       * @description AI-generated guidelines for the review
       */
      guidelines?: Record<string, never> | null;
      /**
       * Constraints
       * @description AI-generated constraints for the review
       */
      constraints?: Record<string, never> | null;
      /**
       * Detector
       * @description AI-generated detector prompt for the review
       */
      detector?: string | null;
      /**
       * Assessor
       * @description AI-generated assessor prompt for the review
       */
      assessor?: string | null;
      /**
       * Is Ready For Ai Review
       * @description Whether this RPD version has been preprocessed and is ready for AI review
       * @default false
       */
      is_ready_for_ai_review: boolean;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Review Point Definition Id
       * Format: uuid
       */
      review_point_definition_id: string;
      /** Parent Key */
      parent_key?:
        | (
            | 'general_ng_review'
            | 'visual_review'
            | 'settings_review'
            | 'design_review'
            | 'text_review'
            | 'copyright_review'
          )
        | null;
      /** Version Number */
      version_number: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Created By */
      created_by?: string | null;
    };
    /** ReviewPointDefinitionVersion */
    ReviewPointDefinitionVersion_2kcj3z_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Version Number */
      version_number: number;
      /** Title */
      title: string;
      /**
       * User Instruction
       * @description User instruction for AI review
       */
      user_instruction?: (string | null) | null;
      /**
       * Description For Ai
       * @description generated prompt for AI review
       */
      description_for_ai: string;
      /**
       * Is Active Version
       * @default true
       */
      is_active_version: boolean | null;
      /** Created By */
      created_by?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for reference images that provide visual context and guidance for AI reviews
       */
      reference_images?: (string[] | null) | null;
      /**
       * Tag List
       * @description List of tags for NG review filtering
       */
      tag_list?: (string[] | null) | null;
      /**
       * Reference Files
       * @description List of S3 URLs for reference files (e.g., appellation table for text_review)
       */
      reference_files?: (string[] | null) | null;
      /**
       * Special Rules
       * @description Special rules in JSON format: [{'speaker': '角色A', 'target': '角色B', 'alias': '特殊称呼', 'conditions': ['条件1', '条件2']}]
       */
      special_rules?: (Record<string, never>[] | null) | null;
      /**
       * Ng Subcategory
       * @description Subcategory for general_ng_review: 'concrete_shape' or 'abstract_type'
       */
      ng_subcategory?: (string | null) | null;
      /**
       * Rpd Type
       * @description RPD classification type (e.g., 'right/wrong tasks', 'classification tasks', etc.)
       */
      rpd_type?: (string | null) | null;
      /**
       * Guidelines
       * @description AI-generated guidelines for the review
       */
      guidelines?: (Record<string, never> | null) | null;
      /**
       * Constraints
       * @description AI-generated constraints for the review
       */
      constraints?: (Record<string, never> | null) | null;
      /**
       * Detector
       * @description AI-generated detector prompt for the review
       */
      detector?: (string | null) | null;
      /**
       * Assessor
       * @description AI-generated assessor prompt for the review
       */
      assessor?: (string | null) | null;
      /**
       * Is Ready For Ai Review
       * @description Whether this RPD version has been preprocessed and is ready for AI review
       * @default true
       */
      is_ready_for_ai_review: boolean | null;
    };
    /** ReviewPointDefinitionVersion */
    ReviewPointDefinitionVersion_ilg6mo_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Version Number */
      version_number: number;
      /** Title */
      title: string;
      /**
       * User Instruction
       * @description User instruction for AI review
       */
      user_instruction?: (string | null) | null;
      /**
       * Description For Ai
       * @description generated prompt for AI review
       */
      description_for_ai: string;
      /**
       * Is Active Version
       * @default true
       */
      is_active_version: boolean | null;
      /** Created By */
      created_by?: (string | null) | null;
      /**
       * Reference Images
       * @description List of S3 paths for reference images that provide visual context and guidance for AI reviews
       */
      reference_images?: (string[] | null) | null;
      /**
       * Tag List
       * @description List of tags for NG review filtering
       */
      tag_list?: (string[] | null) | null;
      /**
       * Reference Files
       * @description List of S3 URLs for reference files (e.g., appellation table for text_review)
       */
      reference_files?: (string[] | null) | null;
      /**
       * Special Rules
       * @description Special rules in JSON format: [{'speaker': '角色A', 'target': '角色B', 'alias': '特殊称呼', 'conditions': ['条件1', '条件2']}]
       */
      special_rules?: (Record<string, never>[] | null) | null;
      /**
       * Ng Subcategory
       * @description Subcategory for general_ng_review: 'concrete_shape' or 'abstract_type'
       */
      ng_subcategory?: (string | null) | null;
      /**
       * Rpd Type
       * @description RPD classification type (e.g., 'right/wrong tasks', 'classification tasks', etc.)
       */
      rpd_type?: (string | null) | null;
      /**
       * Guidelines
       * @description AI-generated guidelines for the review
       */
      guidelines?: (Record<string, never> | null) | null;
      /**
       * Constraints
       * @description AI-generated constraints for the review
       */
      constraints?: (Record<string, never> | null) | null;
      /**
       * Detector
       * @description AI-generated detector prompt for the review
       */
      detector?: (string | null) | null;
      /**
       * Assessor
       * @description AI-generated assessor prompt for the review
       */
      assessor?: (string | null) | null;
      /**
       * Is Ready For Ai Review
       * @description Whether this RPD version has been preprocessed and is ready for AI review
       * @default true
       */
      is_ready_for_ai_review: boolean | null;
      /** Findings Via Version */
      findings_via_version: components['schemas']['AiReviewFindingEntry_i23odv_leaf'][];
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_2nuqwr_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
      /** Versions */
      versions: components['schemas']['ReviewPointDefinitionVersion_2kcj3z_leaf'][];
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_42finq_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
      /** Versions */
      versions: components['schemas']['ReviewPointDefinitionVersion_2kcj3z_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_4ds2k6_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_gfcsr4_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
      /** Characters */
      characters: components['schemas']['Character_hkomuq_leaf'][];
      /** Versions */
      versions: components['schemas']['ReviewPointDefinitionVersion_ilg6mo_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_to7lvp_leaf'][];
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_ia7rbq_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
      project: components['schemas']['Project_ff7gsz_leaf'];
      /** Versions */
      versions: components['schemas']['ReviewPointDefinitionVersion_2kcj3z_leaf'][];
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_ohzkjs_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
      /** Versions */
      versions: components['schemas']['ReviewPointDefinitionVersion_2kcj3z_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
    };
    /** ReviewPointDefinition */
    ReviewPointDefinition_r45ff3_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Key
       * @description e.g., "general_ng_review", "visual_review"
       */
      key: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean | null;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the RPD
       * @default false
       */
      is_deleted: boolean | null;
      project: components['schemas']['Project_qf4dgk_leaf'];
      /** Versions */
      versions: components['schemas']['ReviewPointDefinitionVersion_ilg6mo_leaf'][];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_gdbwqw_leaf'][];
    };
    /** ReviewSetCharacterAssociationCreate */
    ReviewSetCharacterAssociationCreate: {
      /**
       * Review Set Id
       * Format: uuid
       */
      review_set_id: string;
      /**
       * Character Id
       * Format: uuid
       */
      character_id: string;
    };
    /** ReviewSetCharacterAssociationOut */
    ReviewSetCharacterAssociationOut: {
      /**
       * Review Set Id
       * Format: uuid
       */
      review_set_id: string;
      /**
       * Character Id
       * Format: uuid
       */
      character_id: string;
    };
    /** ReviewSetCharacterAssociationWithDetails */
    ReviewSetCharacterAssociationWithDetails: {
      /**
       * Review Set Id
       * Format: uuid
       */
      review_set_id: string;
      /**
       * Character Id
       * Format: uuid
       */
      character_id: string;
      review_set: components['schemas']['ReviewSetInDB'];
      character: components['schemas']['CharacterForReviewSet'];
    };
    /** ReviewSetCreate */
    ReviewSetCreate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /** Rpd Ids */
      rpd_ids?: string[];
      /** Character Ids */
      character_ids?: string[];
      /** Task Tag Ids */
      task_tag_ids?: string[];
    };
    /** ReviewSetInDB */
    ReviewSetInDB: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** ReviewSetOut */
    ReviewSetOut: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Rpds */
      rpds?: components['schemas']['RPDForReviewSet'][];
      /** Characters */
      characters?: components['schemas']['CharacterForReviewSet'][];
      /** Task Tags */
      task_tags?: components['schemas']['TaskTagOut'][];
    };
    /**
     * ReviewSetRecommendation
     * @description Review Set recommendation based on character and tags
     */
    ReviewSetRecommendation: {
      /**
       * Review Set Id
       * Format: uuid
       * @description The ID of the recommended Review Set
       */
      review_set_id: string;
      /**
       * Review Set Name
       * @description The name of the recommended Review Set
       */
      review_set_name: string;
      /**
       * Score
       * @description Recommendation score
       */
      score: number;
      /**
       * Tag Matches
       * @description Matched tag names
       * @default []
       */
      tag_matches: string[];
      /**
       * Character Matches
       * @description Matched character names
       * @default []
       */
      character_matches: string[];
      /**
       * Tag Score
       * @description Score from tag matching
       */
      tag_score: number;
      /**
       * Character Score
       * @description Score from character matching
       */
      character_score: number;
    };
    /** ReviewSetUpdate */
    ReviewSetUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Rpd Ids */
      rpd_ids?: string[] | null;
      /** Character Ids */
      character_ids?: string[] | null;
      /** Task Tag Ids */
      task_tag_ids?: string[] | null;
    };
    /** ReviewSet */
    ReviewSet_4n4zx5_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Rpds */
      rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_6gyanx_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      project: components['schemas']['Project_n6f5tk_leaf'];
      /** Rpds */
      rpds: components['schemas']['ReviewPointDefinition_ia7rbq_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_vwyd6b_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_ag6udm_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Rpds */
      rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_gdbwqw_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      project: components['schemas']['Project_ff7gsz_leaf'];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_kocyqy_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Rpds */
      rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_l6cvvj_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
    };
    /** ReviewSet */
    ReviewSet_to7lvp_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_cutkof_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_uavksy_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      project: components['schemas']['Project_ff7gsz_leaf'];
      /** Rpds */
      rpds: components['schemas']['ReviewPointDefinition_4ds2k6_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_rstgbl_leaf'][];
    };
    /** ReviewSet */
    ReviewSet_xlj7hq_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description?: (string | null) | null;
      /** Rpds */
      rpds: components['schemas']['ReviewPointDefinition_2nuqwr_leaf'][];
      /** Characters */
      characters: components['schemas']['Character_5uffyo_leaf'][];
      /** Task Tags */
      task_tags: components['schemas']['TaskTag_4oktvr_leaf'][];
    };
    /**
     * SceneFrameResponse
     * @description 场景关键帧响应模型
     */
    SceneFrameResponse: {
      /**
       * First Frame
       * @description 第一帧的Base64编码图片数据
       */
      first_frame: string;
      /**
       * Middle Frame
       * @description 中间帧的Base64编码图片数据
       */
      middle_frame: string;
      /**
       * Last Frame
       * @description 最后帧的Base64编码图片数据
       */
      last_frame: string;
      /**
       * Scene Number
       * @description 场景编号
       */
      scene_number: number;
    };
    /**
     * SceneFramesWithInfoResponse
     * @description 带场景信息的帧响应模型
     */
    SceneFramesWithInfoResponse: {
      frames: components['schemas']['SceneFrameResponse'];
      scene_info: components['schemas']['SceneInfo'];
    };
    /**
     * SceneInfo
     * @description 场景信息模型
     */
    SceneInfo: {
      /** Scene Number */
      scene_number: number;
      /** Start Time */
      start_time: number;
      /** End Time */
      end_time: number;
      /** Duration */
      duration: number;
      /** Start Frame */
      start_frame: number;
      /** End Frame */
      end_frame: number;
      /** Frame Count */
      frame_count: number;
    };
    /** StatusHistoryEntry */
    StatusHistoryEntry: {
      /** Updated At */
      updated_at: string;
      updated_by: components['schemas']['SubtaskStatusUser'];
      status_from?: components['schemas']['SubtaskStatus'] | null;
      status_to: components['schemas']['SubtaskStatus'];
    };
    /** SubtaskAnnotation */
    SubtaskAnnotation: {
      /** Id */
      id: string;
      /** Type */
      type?: ('annotation' | 'comment' | 'ai-annotation' | 'ai-comment') | null;
      /** Version */
      version?: number | null;
      /** Timestamp */
      timestamp?: string | null;
      /** Author */
      author?: string | null;
      /** To */
      to?: string | null;
      /** Solved */
      solved?: boolean | null;
      /** Attachment Image Url */
      attachment_image_url?: string | null;
      /** Text */
      text: string;
      rect?: components['schemas']['Rect'] | null;
      /** Color */
      color?: string | null;
      /** Tool */
      tool?: ('cursor' | 'rect' | 'circle' | 'arrow' | 'text' | 'pen') | null;
      /** Start At */
      start_at?: number | null;
      /** End At */
      end_at?: number | null;
      /** Drawing Data */
      drawing_data?: string | null;
    };
    /**
     * SubtaskAnnotationUpdate
     * @description 用于更新注释的输入模型
     * @example {
     *       "rect": {
     *         "height": 150,
     *         "width": 200,
     *         "x": 100,
     *         "y": 50
     *       },
     *       "text": "修正后的评论内容"
     *     }
     */
    SubtaskAnnotationUpdate: {
      /**
       * Text
       * @description 注释内容
       */
      text?: string | null;
      /** @description 注释位置和大小 */
      rect?: components['schemas']['Rect'] | null;
    };
    /**
     * SubtaskCharactersUpdate
     * @description 用于更新子任务角色关联的输入模型
     * @example {
     *       "character_ids": [
     *         "12345678-1234-1234-1234-123456789abc",
     *         "87654321-4321-4321-4321-cba987654321"
     *       ]
     *     }
     */
    SubtaskCharactersUpdate: {
      /**
       * Character Ids
       * @description Character UUIDs to associate with this subtask
       */
      character_ids: string[];
    };
    /** SubtaskContent */
    SubtaskContent: {
      /** Title */
      title: string;
      /** S3 Path */
      s3_path: string;
      /** Description */
      description: string;
      task_type: components['schemas']['SubtaskType'];
      /** Author */
      author?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Slide Page Number */
      slide_page_number?: number | null;
      /** Compressed S3 Path */
      compressed_s3_path?: string | null;
    };
    /** SubtaskCopyPayload */
    SubtaskCopyPayload: {
      /** Target Task Id */
      target_task_id: string;
    };
    /** SubtaskDetail */
    SubtaskDetail: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /**
       * Task Type
       * @description PICTURE: picture<br/>VIDEO: video<br/>TEXT: text<br/>AUDIO: audio<br/>WORD: word<br/>EXCEL: excel
       * @default picture
       */
      task_type: components['schemas']['SubtaskType'] | null;
      /** Description */
      description?: (string | null) | null;
      /** Slide Page Number */
      slide_page_number?: (number | null) | null;
      /** Content */
      content?: (components['schemas']['SubtaskContent'] | null) | null;
      /** History */
      history?: (components['schemas']['SubtaskContent'][] | null) | null;
      /** Annotations */
      annotations?: (components['schemas']['SubtaskAnnotation'][] | null) | null;
      /** Status History */
      status_history?: (components['schemas']['StatusHistoryEntry'][] | null) | null;
      /**
       * Character Ids
       * @description A list of character UUIDs associated with this subtask.
       */
      character_ids?: (string[] | null) | null;
      /**
       * User Selected Character Ids
       * @description A list of character UUIDs manually selected by user. Takes priority over AI predictions.
       */
      user_selected_character_ids?: (string[] | null) | null;
      task: components['schemas']['Task_3vsong_leaf'];
      /**
       * Status
       * @description PENDING: pending<br/>DENIED: denied<br/>ACCEPTED: accepted
       * @default pending
       */
      status: components['schemas']['SubtaskStatus'] | null;
      /**
       * Ai Detection
       * @description AI detection result
       */
      ai_detection?: (Record<string, never> | null) | null;
      /**
       * Ai Classification Status
       * @description Status of AI classification for the subtask
       * @default unclassified
       */
      ai_classification_status: components['schemas']['AIClassificationStatus'] | null;
      /** Ai Reviews */
      ai_reviews: components['schemas']['AiReview_zid4jh_leaf'][];
      /** Version */
      readonly version: number;
    };
    /** SubtaskOut */
    SubtaskOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /**
       * Task Type
       * @description PICTURE: picture<br/>VIDEO: video<br/>TEXT: text<br/>AUDIO: audio<br/>WORD: word<br/>EXCEL: excel
       * @default picture
       */
      task_type: components['schemas']['SubtaskType'] | null;
      /** Description */
      description?: (string | null) | null;
      /** Slide Page Number */
      slide_page_number?: (number | null) | null;
      /** Content */
      content?: (components['schemas']['SubtaskContent'] | null) | null;
      /** Annotations */
      annotations?: (components['schemas']['SubtaskAnnotation'][] | null) | null;
      /** Status History */
      status_history?: (components['schemas']['StatusHistoryEntry'][] | null) | null;
      /**
       * Character Ids
       * @description A list of character UUIDs associated with this subtask.
       */
      character_ids?: (string[] | null) | null;
      /**
       * User Selected Character Ids
       * @description A list of character UUIDs manually selected by user. Takes priority over AI predictions.
       */
      user_selected_character_ids?: (string[] | null) | null;
      /**
       * Status
       * @description PENDING: pending<br/>DENIED: denied<br/>ACCEPTED: accepted
       * @default pending
       */
      status: components['schemas']['SubtaskStatus'] | null;
      /**
       * Ai Detection
       * @description AI detection result
       */
      ai_detection?: (Record<string, never> | null) | null;
      /**
       * Ai Classification Status
       * @description Status of AI classification for the subtask
       * @default unclassified
       */
      ai_classification_status: components['schemas']['AIClassificationStatus'] | null;
      /**
       * Task Id
       * Format: uuid
       */
      task_id: string;
      /** Version */
      readonly version: number;
    };
    /**
     * SubtaskStatus
     * @enum {string}
     */
    SubtaskStatus: 'pending' | 'denied' | 'accepted';
    /** SubtaskStatusUser */
    SubtaskStatusUser: {
      /** User Id */
      user_id: string;
      /** User Name */
      user_name: string;
    };
    /**
     * SubtaskType
     * @enum {string}
     */
    SubtaskType: 'picture' | 'video' | 'text' | 'audio' | 'word' | 'excel';
    /**
     * SubtaskUpdate
     * @description 用于更新子任务基本信息的输入模型
     */
    SubtaskUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
    };
    /** Subtask */
    Subtask_azpicb_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /**
       * Task Type
       * @description PICTURE: picture<br/>VIDEO: video<br/>TEXT: text<br/>AUDIO: audio<br/>WORD: word<br/>EXCEL: excel
       * @default picture
       */
      task_type: components['schemas']['SubtaskType'] | null;
      /** Description */
      description?: (string | null) | null;
      /** Slide Page Number */
      slide_page_number?: (number | null) | null;
      /** Content */
      content?: (components['schemas']['SubtaskContent'] | null) | null;
      /** History */
      history?: (components['schemas']['SubtaskContent'][] | null) | null;
      /** Annotations */
      annotations?: (components['schemas']['SubtaskAnnotation'][] | null) | null;
      /** Status History */
      status_history?: (components['schemas']['StatusHistoryEntry'][] | null) | null;
      /**
       * Character Ids
       * @description A list of character UUIDs associated with this subtask.
       */
      character_ids?: (string[] | null) | null;
      /**
       * User Selected Character Ids
       * @description A list of character UUIDs manually selected by user. Takes priority over AI predictions.
       */
      user_selected_character_ids?: (string[] | null) | null;
      /**
       * Status
       * @description PENDING: pending<br/>DENIED: denied<br/>ACCEPTED: accepted
       * @default pending
       */
      status: components['schemas']['SubtaskStatus'] | null;
      /**
       * Ai Detection
       * @description AI detection result
       */
      ai_detection?: (Record<string, never> | null) | null;
      /**
       * Ai Classification Status
       * @description Status of AI classification for the subtask
       * @default unclassified
       */
      ai_classification_status: components['schemas']['AIClassificationStatus'] | null;
      /** Version */
      readonly version: number;
    };
    /** TaskIn */
    TaskIn: {
      /** Tid */
      tid: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Assignee Id
       * Format: uuid
       */
      assignee_id: string;
      /**
       * Priority Id
       * Format: uuid
       */
      priority_id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Status Id
       * Format: uuid
       */
      status_id: string;
    };
    /** TaskKanbanOrderIn */
    TaskKanbanOrderIn: {
      /** Task Order */
      task_order?: (string[] | null) | null;
    };
    /** TaskKanbanOrderOut */
    TaskKanbanOrderOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Task Order */
      task_order?: (string[] | null) | null;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Status Id
       * Format: uuid
       */
      status_id: string;
    };
    /** TaskKanbanOrder */
    TaskKanbanOrder_6rc2r6_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Status */
      status: components['schemas']['TaskStatus_kfi3op_leaf'];
      /** Task Order */
      task_order?: (string[] | null) | null;
    };
    /** TaskKanbanOrder */
    TaskKanbanOrder_y2r4ew_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Task Order */
      task_order?: (string[] | null) | null;
    };
    /**
     * TaskNavigationItem
     * @description 任务导航专用的轻量级数据模型项目
     */
    TaskNavigationItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Tid */
      tid: string;
      /** Description */
      description: string;
    };
    /**
     * TaskNavigationResponse
     * @description 任务导航专用的轻量级数据模型
     */
    TaskNavigationResponse: {
      /** Total */
      total: number;
      /** Items */
      items: components['schemas']['TaskNavigationItem'][];
    };
    /** TaskOut */
    TaskOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Tid */
      tid: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** S3 Path */
      s3_path: string;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the task
       * @default false
       */
      is_deleted: boolean | null;
      /** Assignee */
      assignee: components['schemas']['User_g3y7nb_leaf'];
      /**
       * Due Date
       * @description Task due date
       */
      due_date?: (string | null) | null;
      /** Tags */
      tags: components['schemas']['TaskTag_bsew2f_leaf'][];
      /** Illustration Doc */
      illustration_doc: (components['schemas']['IllustrationDoc_fc6mi4_leaf'] | null) | null;
      /**
       * Priority Id
       * Format: uuid
       */
      priority_id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Status Id
       * Format: uuid
       */
      status_id: string;
    };
    /** TaskPriorityOut */
    TaskPriorityOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /**
       * Owner Org Id
       * Format: uuid
       */
      owner_org_id: string;
    };
    /** TaskPriority */
    TaskPriority_iu25nj_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
    };
    /** TaskPriority */
    TaskPriority_qapfh7_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
    };
    /**
     * TaskReviewSetRecommendationsResponse
     * @description Response body for task-based Review Set recommendations
     */
    TaskReviewSetRecommendationsResponse: {
      /**
       * Task Id
       * Format: uuid
       * @description The ID of the task
       */
      task_id: string;
      /**
       * Task Name
       * @description The name of the task
       */
      task_name: string;
      /**
       * Recommendations
       * @description List of recommended Review Sets
       */
      recommendations: components['schemas']['ReviewSetRecommendation'][];
      /**
       * Total Recommendations
       * @description Total number of recommendations
       */
      total_recommendations: number;
    };
    /** TaskSimpleOut */
    TaskSimpleOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
    };
    /** TaskStatusOut */
    TaskStatusOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /**
       * Owner Org Id
       * Format: uuid
       */
      owner_org_id: string;
    };
    /** TaskStatus */
    TaskStatus_bsm5s6_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
      /** Owner Org */
      owner_org: components['schemas']['Organization_xbred3_leaf'];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Kanban Order */
      kanban_order: components['schemas']['TaskKanbanOrder_y2r4ew_leaf'][];
    };
    /** TaskStatus */
    TaskStatus_kfi3op_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Oid */
      oid: number;
      /** Name */
      name: string;
    };
    /** TaskTagCreate */
    TaskTagCreate: {
      /** Name */
      name: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
    };
    /** TaskTagOut */
    TaskTagOut: {
      /** Name */
      name: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** TaskTagUpdate */
    TaskTagUpdate: {
      /** Name */
      name: string;
    };
    /** TaskTag */
    TaskTag_4oktvr_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
    };
    /** TaskTag */
    TaskTag_bsew2f_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      project: components['schemas']['Project_feg3u3_leaf'];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_uavksy_leaf'][];
    };
    /** TaskTag */
    TaskTag_cutkof_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
    };
    /** TaskTag */
    TaskTag_prgcp2_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
    };
    /** TaskTag */
    TaskTag_rpbcgt_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_ag6udm_leaf'][];
      /** Tasks */
      tasks: components['schemas']['Task_e2du3r_leaf'][];
    };
    /** TaskTag */
    TaskTag_vwyd6b_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      project: components['schemas']['Project_ff7gsz_leaf'];
      /** Tasks */
      tasks: components['schemas']['Task_6ea7cv_leaf'][];
    };
    /** TaskTag */
    TaskTag_wgshrw_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Name */
      name: string;
      project: components['schemas']['Project_ff7gsz_leaf'];
      /** Review Sets */
      review_sets: components['schemas']['ReviewSet_l6cvvj_leaf'][];
    };
    /**
     * TaskThumbnail
     * @description 单个缩略图信息
     */
    TaskThumbnail: {
      /**
       * Subtask Id
       * Format: uuid
       */
      subtask_id: string;
      /** Subtask Name */
      subtask_name: string;
      /** Original S3 Path */
      original_s3_path: string;
      /** Compressed S3 Path */
      compressed_s3_path?: string | null;
    };
    /**
     * TaskThumbnailsResponse
     * @description 任务缩略图响应模型
     */
    TaskThumbnailsResponse: {
      /**
       * Task Id
       * Format: uuid
       */
      task_id: string;
      /**
       * Thumbnails
       * @description 任务的前几个图片子任务缩略图（默认前3个）
       */
      thumbnails?: components['schemas']['TaskThumbnail'][];
    };
    /**
     * TaskUpdate
     * @description 用于更新任务的输入模型
     */
    TaskUpdate: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Status Id */
      status_id?: string | null;
      /** Priority Id */
      priority_id?: string | null;
      /** Assignee Id */
      assignee_id?: string | null;
      /** Due Date */
      due_date?: string | null;
    };
    /** Task */
    Task_3vsong_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Tid */
      tid: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** S3 Path */
      s3_path: string;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the task
       * @default false
       */
      is_deleted: boolean | null;
      /** Assignee */
      assignee: components['schemas']['User_5qdwey_leaf'];
      /**
       * Due Date
       * @description Task due date
       */
      due_date?: (string | null) | null;
      /** Tags */
      tags: components['schemas']['TaskTag_wgshrw_leaf'][];
      /** Illustration Doc */
      illustration_doc: (components['schemas']['IllustrationDoc_fc6mi4_leaf'] | null) | null;
      /**
       * Priority Id
       * Format: uuid
       */
      priority_id: string;
      /**
       * Project Id
       * Format: uuid
       */
      project_id: string;
      /**
       * Status Id
       * Format: uuid
       */
      status_id: string;
    };
    /** Task */
    Task_6ea7cv_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Tid */
      tid: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** S3 Path */
      s3_path: string;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the task
       * @default false
       */
      is_deleted: boolean | null;
      /**
       * Due Date
       * @description Task due date
       */
      due_date?: (string | null) | null;
    };
    /** Task */
    Task_e2du3r_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Tid */
      tid: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** S3 Path */
      s3_path: string;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the task
       * @default false
       */
      is_deleted: boolean | null;
      /** Assignee */
      assignee: components['schemas']['User_rlfvwj_leaf'];
      /** Status */
      status: components['schemas']['TaskStatus_kfi3op_leaf'];
      /** Priority */
      priority: components['schemas']['TaskPriority_qapfh7_leaf'];
      /**
       * Due Date
       * @description Task due date
       */
      due_date?: (string | null) | null;
      /** Illustration Doc */
      illustration_doc: (components['schemas']['IllustrationDoc_mv32nl_leaf'] | null) | null;
      /** Subtasks */
      subtasks: components['schemas']['Subtask_azpicb_leaf'][];
    };
    /** Task */
    Task_xgjixn_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Tid */
      tid: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** S3 Path */
      s3_path: string;
      /**
       * Is Deleted
       * @description Flag for soft-deleting the task
       * @default false
       */
      is_deleted: boolean | null;
      /** Assignee */
      assignee: components['schemas']['User_rlfvwj_leaf'];
      /** Status */
      status: components['schemas']['TaskStatus_kfi3op_leaf'];
      /** Priority */
      priority: components['schemas']['TaskPriority_qapfh7_leaf'];
      /**
       * Due Date
       * @description Task due date
       */
      due_date?: (string | null) | null;
      /** Tags */
      tags: components['schemas']['TaskTag_cutkof_leaf'][];
      /** Illustration Doc */
      illustration_doc: (components['schemas']['IllustrationDoc_mv32nl_leaf'] | null) | null;
      /** Subtasks */
      subtasks: components['schemas']['Subtask_azpicb_leaf'][];
    };
    /**
     * TextRPDTestRequest
     * @description 文本对话RPD测试的请求模型
     */
    TextRPDTestRequest: {
      /**
       * Dialogue Text
       * @description 要测试的对话文本
       */
      dialogue_text: string;
      /**
       * Rpd Title
       * @description RPD标题
       */
      rpd_title: string;
      /**
       * Appellation File S3 Url
       * @description 称呼表文件的S3 URL
       */
      appellation_file_s3_url: string;
      /**
       * Special Rules
       * @description 特殊规则列表
       * @default []
       */
      special_rules: Record<string, never>[] | null;
      /**
       * Project Id
       * @description 项目ID
       */
      project_id: string;
    };
    /**
     * TextRPDTestResponse
     * @description 文本对话RPD测试的响应模型
     */
    TextRPDTestResponse: {
      /** Success */
      success: boolean;
      /** Message */
      message: string;
      /**
       * Analysis
       * @default
       */
      analysis: string;
      /** Processing Time Seconds */
      processing_time_seconds?: number | null;
      /**
       * Rpd Title
       * @default
       */
      rpd_title: string;
      /** Detected Speaker */
      detected_speaker?: string | null;
      /**
       * Detected Targets
       * @default []
       */
      detected_targets: string[];
    };
    /** UserAdminListOut */
    UserAdminListOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Joined Orgs */
      joined_orgs: components['schemas']['Organization_kywcwu_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** UserIn */
    UserIn: {
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
    };
    /** UserOut */
    UserOut: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_d3hw5m_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /**
     * UserPreferencesResponse
     * @description Response schema for user preferences and settings
     */
    UserPreferencesResponse: {
      /**
       * Settings
       * @description User settings and configuration preferences
       */
      settings?: Record<string, never>;
    };
    /**
     * UserPreferences
     * @description User preferences and settings (liked images moved to dedicated LikedImage model)
     */
    UserPreferences_rre2da_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /**
       * Settings
       * @description User settings and configuration preferences
       */
      settings: Record<string, never> | null;
    };
    /**
     * UserRole
     * @enum {string}
     */
    UserRole: 'user' | 'admin';
    /** User */
    User_5qdwey_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_dzz5ed_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Initiated Ai Reviews */
      initiated_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Modified Ai Reviews */
      modified_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Uploaded Assets */
      uploaded_assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Created Batch Jobs
       * @description 创建该批处理任务的用户
       */
      created_batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /**
       * Uploaded Items
       * @description User who uploaded this item
       */
      uploaded_items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Liked Images New
       * @description User who liked this image
       */
      liked_images_new: components['schemas']['LikedImage_xn5xrn_leaf'][];
      /** Managed Orgs */
      managed_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Joined Orgs */
      joined_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Promoted Findings */
      promoted_findings: components['schemas']['PromotedFinding_pkcm32_leaf'][];
      /** Assigned Tasks */
      assigned_tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Preferences */
      preferences: components['schemas']['UserPreferences_rre2da_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_g3y7nb_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_pmtqyp_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_icoj3a_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_ogi2t2_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Initiated Ai Reviews */
      initiated_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Modified Ai Reviews */
      modified_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Uploaded Assets */
      uploaded_assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Created Batch Jobs
       * @description 创建该批处理任务的用户
       */
      created_batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /**
       * Liked Images New
       * @description User who liked this image
       */
      liked_images_new: components['schemas']['LikedImage_xn5xrn_leaf'][];
      /** Managed Orgs */
      managed_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Joined Orgs */
      joined_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Promoted Findings */
      promoted_findings: components['schemas']['PromotedFinding_pkcm32_leaf'][];
      /** Assigned Tasks */
      assigned_tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Preferences */
      preferences: components['schemas']['UserPreferences_rre2da_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_pitg6z_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Initiated Ai Reviews */
      initiated_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Modified Ai Reviews */
      modified_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Uploaded Assets */
      uploaded_assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /**
       * Uploaded Items
       * @description User who uploaded this item
       */
      uploaded_items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Liked Images New
       * @description User who liked this image
       */
      liked_images_new: components['schemas']['LikedImage_xn5xrn_leaf'][];
      /** Managed Orgs */
      managed_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Joined Orgs */
      joined_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Promoted Findings */
      promoted_findings: components['schemas']['PromotedFinding_pkcm32_leaf'][];
      /** Assigned Tasks */
      assigned_tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Preferences */
      preferences: components['schemas']['UserPreferences_rre2da_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_rlfvwj_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_tb4km4_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Initiated Ai Reviews */
      initiated_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Modified Ai Reviews */
      modified_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /**
       * Created Batch Jobs
       * @description 创建该批处理任务的用户
       */
      created_batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /**
       * Uploaded Items
       * @description User who uploaded this item
       */
      uploaded_items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Liked Images New
       * @description User who liked this image
       */
      liked_images_new: components['schemas']['LikedImage_xn5xrn_leaf'][];
      /** Managed Orgs */
      managed_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Joined Orgs */
      joined_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /**
       * Uploaded Pdfs
       * @description User who uploaded this PDF
       */
      uploaded_pdfs: components['schemas']['PDF_bjp5ln_leaf'][];
      /** Promoted Findings */
      promoted_findings: components['schemas']['PromotedFinding_pkcm32_leaf'][];
      /** Assigned Tasks */
      assigned_tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Preferences */
      preferences: components['schemas']['UserPreferences_rre2da_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** User */
    User_wk7sxb_leaf: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      readonly created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      readonly updated_at: string;
      /** Email */
      email: string;
      /** Display Name */
      display_name: string;
      /**
       * Role
       * @description USER: user<br/>ADMIN: admin
       * @default user
       */
      role: components['schemas']['UserRole'] | null;
      /** Initiated Ai Reviews */
      initiated_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Modified Ai Reviews */
      modified_ai_reviews: components['schemas']['AiReview_d7n2fs_leaf'][];
      /** Uploaded Assets */
      uploaded_assets: components['schemas']['Asset_bqbv2z_leaf'][];
      /**
       * Created Batch Jobs
       * @description 创建该批处理任务的用户
       */
      created_batch_jobs: components['schemas']['BatchProcessJob_tvdggc_leaf'][];
      /** Generated References */
      generated_references: components['schemas']['GeneratedReference_z4fyu6_leaf'][];
      /**
       * Uploaded Items
       * @description User who uploaded this item
       */
      uploaded_items: components['schemas']['Item_ops744_leaf'][];
      /**
       * Liked Images New
       * @description User who liked this image
       */
      liked_images_new: components['schemas']['LikedImage_xn5xrn_leaf'][];
      /** Managed Orgs */
      managed_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Joined Orgs */
      joined_orgs: components['schemas']['Organization_xbred3_leaf'][];
      /** Promoted Findings */
      promoted_findings: components['schemas']['PromotedFinding_pkcm32_leaf'][];
      /** Assigned Tasks */
      assigned_tasks: components['schemas']['Task_6ea7cv_leaf'][];
      /** Preferences */
      preferences: components['schemas']['UserPreferences_rre2da_leaf'][];
      /** Avatar Url */
      readonly avatar_url: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VideoScenesResponse
     * @description 视频场景检测响应模型
     */
    VideoScenesResponse: {
      /** Scenes */
      scenes: components['schemas']['SceneInfo'][];
      /** Total Scenes */
      total_scenes: number;
      /** Detector Used */
      detector_used: string;
      /** Threshold Used */
      threshold_used: number;
      /**
       * Message
       * @description 额外信息
       * @default
       */
      message: string;
    };
    /**
     * AiReviewProcessingStatus
     * @description Response body for AI review processing status
     */
    aimage_supervision__endpoints__ai_review__AiReviewProcessingStatus: {
      /**
       * Subtask Id
       * Format: uuid
       * @description The ID of the subtask
       */
      subtask_id: string;
      /**
       * Is Processing
       * @description Whether AI review is currently being processed
       */
      is_processing: boolean;
      /**
       * Is Completed
       * @description Whether AI review has been completed
       */
      is_completed: boolean;
      /**
       * Is Cancelled
       * @description Whether AI review has been cancelled
       * @default false
       */
      is_cancelled: boolean | null;
      /**
       * Latest Review Id
       * @description The ID of the latest AI review if available
       */
      latest_review_id?: string | null;
      /**
       * Processing Started At
       * @description When the processing started
       */
      processing_started_at?: string | null;
      /**
       * Completed At
       * @description When the processing completed
       */
      completed_at?: string | null;
      /**
       * Findings Count
       * @description Number of findings generated
       * @default 0
       */
      findings_count: number;
      /**
       * Message
       * @description Status message
       */
      message: string;
      /**
       * Processing Status
       * @description 明确的状态字符串
       */
      processing_status?: string | null;
      /**
       * Error Message
       * @description 错误信息
       */
      error_message?: string | null;
      /**
       * Should Cancel
       * @description 中断信号
       * @default false
       */
      should_cancel: boolean | null;
    };
    /**
     * AiReviewProcessingStatus
     * @enum {string}
     */
    aimage_supervision__enums__AiReviewProcessingStatus:
      | 'pending'
      | 'processing'
      | 'completed'
      | 'failed'
      | 'cancelled';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  health_check_api_v1_health_check_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string;
          };
        };
      };
    };
  };
  list_users_api_v1_admin_users_get: {
    parameters: {
      query?: {
        /** @description Contains the email of the user */
        email?: string | null;
        /** @description Contains the display name of the user */
        display_name?: string | null;
        /** @description Contains the role of the user */
        role?: components['schemas']['UserRole'] | null;
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_UserAdminListOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_user_api_v1_admin_users_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserIn'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_projects_api_v1_admin_projects_get: {
    parameters: {
      query?: {
        /** @description Contains the name of the project */
        name?: string | null;
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_ProjectSimpleOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_user_projects_api_v1_admin_users__user_id__projects_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_ProjectOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_user_api_v1_admin_users__user_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_user_role_api_v1_admin_users__user_id__patch: {
    parameters: {
      query: {
        role: components['schemas']['UserRole'];
      };
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  auto_register_user_api_v1_users_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserIn'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  retrieve_current_user_api_v1_users_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  retrieve_user_api_v1_users__user_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_liked_images_api_v1_users_me_preferences_liked_images_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LikedImageResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_liked_image_api_v1_users_me_preferences_liked_images_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LikedImageRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  remove_liked_image_api_v1_users_me_preferences_liked_images_delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LikedImageRemoveRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_user_preferences_api_v1_users_me_preferences__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserPreferencesResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_projects_api_v1_projects_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_ProjectSimpleOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_project_api_v1_projects_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProjectIn'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_project_api_v1_projects__project_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_or_quit_project_api_v1_projects__project_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_project_documents_api_v1_projects__project_id__documents_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_project_documents_api_v1_projects__project_id__documents_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_document_url_api_v1_projects__project_id__documents__document_id__url_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
        document_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_rpd_reference_image_api_v1_projects__project_id__rpd_reference_images_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_rpd_reference_image_api_v1_projects__project_id__rpd_reference_images_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_rpd_reference_images_batch_api_v1_projects__project_id__rpd_reference_images_batch_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_rpd_reference_images_batch_api_v1_projects__project_id__rpd_reference_images_batch_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_task_priorities_api_v1_tasks_priorities_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_TaskPriorityOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_task_statuses_api_v1_tasks_statuses_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_TaskStatusOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_project_tasks_api_v1_projects__project_id__tasks_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        sort_by?: 'created_at' | 'priority';
        order?: 'asc' | 'desc';
        status_id?: string | null;
        priority_id?: string | null;
        assignee_id?: string | null;
      };
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_task_api_v1_projects__project_id__tasks_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskIn'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskSimpleOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_task_status_api_v1_tasks__task_id__status_patch: {
    parameters: {
      query: {
        status_id: string;
      };
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_task_priority_api_v1_tasks__task_id__priority_patch: {
    parameters: {
      query: {
        priority_id: string;
      };
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_project_tasks_kanban_order_api_v1_projects__project_id__tasks_kanban_order_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_TaskKanbanOrderOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_or_update_project_tasks_kanban_order_api_v1_projects__project_id__tasks_kanban_order_statuses__status_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
        status_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskKanbanOrderIn'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_task_api_v1_tasks__task_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_task_details_api_v1_tasks__task_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_task_api_v1_tasks__task_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_tag_to_task_api_v1_tasks__task_id__tags__tag_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
        tag_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  remove_tag_from_task_api_v1_tasks__task_id__tags__tag_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
        tag_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_task_tags_api_v1_tasks__task_id__tags_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskTagOut'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_task_subtasks_api_v1_tasks__task_id__subtasks_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_SubtaskOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_subtask_api_v1_tasks__task_id__subtasks_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_create_subtask_api_v1_tasks__task_id__subtasks_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_subtask_api_v1_subtasks__subtask_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_subtask_details_api_v1_subtasks__subtask_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubtaskUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_subtask_characters_api_v1_subtasks__subtask_id__characters_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubtaskCharactersUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_subtask_annotations_api_v1_subtasks__subtask_id__annotations_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_SubtaskAnnotation_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_subtask_annotation_api_v1_subtasks__subtask_id__annotations_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubtaskAnnotation'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_subtask_annotation_solved_api_v1_subtasks__subtask_id__annotations__annotation_id__solved_patch: {
    parameters: {
      query?: {
        solved?: boolean;
      };
      header?: never;
      path: {
        subtask_id: string;
        annotation_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_subtask_annotation_api_v1_subtasks__subtask_id__annotations__annotation_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
        annotation_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_subtask_annotation_api_v1_subtasks__subtask_id__annotations__annotation_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
        annotation_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubtaskAnnotationUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_subtask_status_api_v1_subtasks__subtask_id__status_patch: {
    parameters: {
      query?: {
        status_name?: components['schemas']['SubtaskStatus'];
      };
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  export_task_pdf_api_v1_tasks__task_id__export_pdf_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_subtask_content_api_v1_subtasks__subtask_id__content_patch: {
    parameters: {
      query: {
        s3_path: string;
      };
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_pptx_api_v1_tasks_upload_pptx_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_pptx_api_v1_tasks_upload_pptx_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_upload_status_api_v1_tasks_upload_status__batch_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        batch_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FileProcessingStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  export_task_pptx_api_v1_tasks__task_id__export_pptx_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_document_api_v1_tasks_upload_document_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_document_api_v1_tasks_upload_document_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_task_from_uploaded_image_api_v1_projects__project_id__tasks_create_from_image_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_create_task_from_uploaded_image_api_v1_projects__project_id__tasks_create_from_image_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_task_from_uploaded_video_api_v1_projects__project_id__tasks_create_from_video_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_create_task_from_uploaded_video_api_v1_projects__project_id__tasks_create_from_video_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_all_project_tasks_api_v1_projects__project_id__tasks_all_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskSimpleOut'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  copy_subtask_api_v1_subtasks__subtask_id__copy_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubtaskCopyPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubtaskOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  suggest_review_sets_for_task_api_v1_tasks__task_id__suggested_review_sets_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetOut'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_project_tasks_for_navigation_api_v1_projects__project_id__tasks_navigation_get: {
    parameters: {
      query?: {
        sort_by?: 'tid' | 'name' | 'created_at';
        order?: 'asc' | 'desc';
      };
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskNavigationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_task_thumbnails_api_v1_tasks__task_id__thumbnails_get: {
    parameters: {
      query?: {
        limit?: number;
      };
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskThumbnailsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_asset_api_v1_assets_get: {
    parameters: {
      query: {
        s3_path: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AssetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_image_api_v1_assets_images_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_image_api_v1_assets_images_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AssetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_assets_api_v1_projects__project_id__assets_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_AssetOut_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_asset_from_google_drive_api_v1_projects__project_id__assets_post: {
    parameters: {
      query: {
        /** @description Google access token */
        google_access_token: string;
      };
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AssetIn'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AssetOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  process_pptx_assets_api_v1_projects__project_id__assets_process_pptx_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProcessPPTXResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_temp_image_api_v1_assets_temp_images_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_temp_image_api_v1_assets_temp_images_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AssetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cleanup_temp_session_api_v1_assets_temp_sessions__session_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CleanupSessionResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  promote_temp_images_api_v1_assets_temp_sessions__session_id__promote_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PromoteTempImagesRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PromoteTempImagesResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  google_login_api_v1_auth_google_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GoogleLoginRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  logout_api_v1_auth_logout_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  list_review_point_definitions_endpoint_api_v1_review_point_definitions__get: {
    parameters: {
      query?: {
        project_id?: string | null;
        active_only?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewPointDefinition'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_review_point_definition_endpoint_api_v1_review_point_definitions__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewPointDefinitionCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewPointDefinition'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_appellation_data_endpoint_api_v1_review_point_definitions_appellation_data__get: {
    parameters: {
      query: {
        s3_url: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AppellationDataResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_review_point_definition_endpoint_api_v1_review_point_definitions__rpd_id___get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewPointDefinition'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_review_point_definition_endpoint_api_v1_review_point_definitions__rpd_id___delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_new_version_for_review_point_endpoint_api_v1_review_point_definitions__rpd_id__versions__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewPointDefinitionVersionBase'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewPointDefinitionVersionInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_rpd_status_endpoint_api_v1_review_point_definitions__rpd_id__status__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RPDStatusUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewPointDefinition'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  generate_description_endpoint_api_v1_review_point_definitions_generate_description__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateDescriptionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GenerateDescriptionResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  rewrite_prompt_endpoint_api_v1_review_point_definitions_rewrite_prompt_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptRewriteRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PromptRewriteResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  generate_rpd_content_endpoint_api_v1_review_point_definitions_generate_rpd_content_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateRPDContentRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GenerateRPDContentResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  generate_image_description_endpoint_api_v1_review_point_definitions_generate_image_description_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateImageDescriptionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GenerateImageDescriptionResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  autofill_rpd_title_api_v1_review_point_definitions_autofill_title_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AutofillRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AutofillResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  test_rpd_with_image_endpoint_api_v1_review_point_definitions_test_rpd_with_image_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_test_rpd_with_image_endpoint_api_v1_review_point_definitions_test_rpd_with_image_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ImageRPDTestResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_appellation_file_endpoint_api_v1_review_point_definitions_upload_appellation_file__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_appellation_file_endpoint_api_v1_review_point_definitions_upload_appellation_file__post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AppellationUploadResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  test_rpd_with_text_endpoint_api_v1_review_point_definitions_test_rpd_with_text_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TextRPDTestRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TextRPDTestResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_character_to_rpd_api_v1_review_point_definitions__rpd_id__characters__character_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  remove_character_from_rpd_api_v1_review_point_definitions__rpd_id__characters__character_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_rpd_characters_api_v1_review_point_definitions__rpd_id__characters_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        rpd_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  initiate_ai_review_endpoint_api_v1_ai_reviews_subtasks__subtask_id__initiate_post: {
    parameters: {
      query?: {
        cr_check?: boolean | null;
        /** @description AI Review Mode: 'quality' for precision, 'speed' for faster results. */
        mode?: components['schemas']['AiReviewMode'];
      };
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AIReviewInitiateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_ai_review_by_id_endpoint_api_v1_ai_reviews__ai_review_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ai_review_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AiReview'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_latest_ai_review_for_subtask_endpoint_api_v1_ai_reviews_subtasks__subtask_id__latest_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AiReview'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_ai_reviews_for_subtask_endpoint_api_v1_ai_reviews_subtasks__subtask_id__all_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AiReview'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  batch_initiate_cr_check_review_endpoint_api_v1_ai_reviews_batch_cr_check_initiate_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInitiateAiReviewRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  batch_initiate_custom_ai_review_endpoint_api_v1_ai_reviews_batch_initiate_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInitiateCustomAiReviewRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  interrupt_ai_review_endpoint_api_v1_ai_reviews_subtasks__subtask_id__interrupt_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_ai_review_processing_status_endpoint_api_v1_ai_reviews_subtasks__subtask_id__processing_status_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['aimage_supervision__endpoints__ai_review__AiReviewProcessingStatus'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  predict_character_for_subtask_endpoint_api_v1_ai_reviews_subtasks__subtask_id__predict_character_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_finding_fixed_status_endpoint_api_v1_ai_reviews_findings__finding_id__fixed_status_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        finding_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindingFixedStatusUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_findings_summary_endpoint_api_v1_ai_reviews_subtasks__subtask_id__findings_summary_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AiReview'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_finding_content_endpoint_api_v1_ai_reviews_findings__finding_id__content_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        finding_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindingContentUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_character_rpd_recommendations_endpoint_api_v1_ai_reviews_characters__character_id__rpd_recommendations_get: {
    parameters: {
      query: {
        /** @description Project ID to filter RPDs */
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterRPDRecommendationsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_finding_bounding_box_endpoint_api_v1_ai_reviews_findings__finding_id__bounding_box_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        finding_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FindingBoundingBoxUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_latest_executed_rpds_api_v1_ai_reviews_subtasks__subtask_id__latest_executed_rpds_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LatestExecutedRPDsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cancel_ai_review_api_v1_ai_reviews__ai_review_id__cancel_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ai_review_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_task_review_set_recommendations_endpoint_api_v1_ai_reviews_tasks__task_id__review_set_recommendations_get: {
    parameters: {
      query: {
        /** @description Project ID to filter Review Sets */
        project_id: string;
        /** @description Minimum score to include */
        min_score?: number;
      };
      header?: never;
      path: {
        task_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskReviewSetRecommendationsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_characters_api_v1_characters__get: {
    parameters: {
      query: {
        project_id: string;
        ip_id: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_character_api_v1_characters__post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CharacterCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_character_api_v1_characters__character_id__get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_character_api_v1_characters__character_id__put: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CharacterUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_character_api_v1_characters__character_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_character_image_api_v1_characters__character_id__upload_image_post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_character_image_api_v1_characters__character_id__upload_image_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_character_image_api_v1_characters__character_id__image_get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_character_gallery_api_v1_characters__character_id__gallery_get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_character_gallery_image_api_v1_characters__character_id__gallery_post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_character_gallery_image_api_v1_characters__character_id__gallery_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_character_concept_art_api_v1_characters__character_id__concept_art_get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_character_concept_art_image_api_v1_characters__character_id__concept_art_post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_character_concept_art_image_api_v1_characters__character_id__concept_art_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharacterDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_character_gallery_images_batch_api_v1_characters__character_id__gallery_batch_post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_character_gallery_images_batch_api_v1_characters__character_id__gallery_batch_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_character_gallery_image_api_v1_characters__character_id__gallery__image_index__delete: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
        image_index: number;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_character_concept_art_images_batch_api_v1_characters__character_id__concept_art_batch_post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_character_concept_art_images_batch_api_v1_characters__character_id__concept_art_batch_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_character_concept_art_image_api_v1_characters__character_id__concept_art__image_index__delete: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        character_id: string;
        image_index: number;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_rpd_to_character_api_v1_characters__character_id__rpds__rpd_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        character_id: string;
        rpd_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  remove_rpd_from_character_api_v1_characters__character_id__rpds__rpd_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        character_id: string;
        rpd_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_character_rpds_api_v1_characters__character_id__rpds_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_ips_api_v1_ips__get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IPOut'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_ip_api_v1_ips__post: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['IPCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IPOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_ip_api_v1_ips__ip_id__get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        ip_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IPOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_ip_api_v1_ips__ip_id__put: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        ip_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['IPUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IPOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_ip_api_v1_ips__ip_id__delete: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path: {
        ip_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  batch_upload_items_api_v1_items_batch_upload_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_batch_upload_items_api_v1_items_batch_upload_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_batch_upload_status_api_v1_items_batch_upload__batch_id__status_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        batch_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_items_api_v1_items_projects__project_id__get: {
    parameters: {
      query?: {
        tags?: string | null;
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_ItemResponse_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  generate_project_embeddings_api_v1_items_projects__project_id__generate_embeddings_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: {
      content: {
        'application/json': string[] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_item_api_v1_items__item_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ItemResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_item_api_v1_items__item_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ItemUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ItemResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_item_api_v1_items__item_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_project_items_api_v1_items__get: {
    parameters: {
      query: {
        project_id: string;
        tags?: string | null;
        /** @description Page number */
        page?: number;
        /** @description The number of items to return per page */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Page_ItemResponse_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  search_items_by_image_api_v1_items_projects__project_id__search_by_image_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ImageSearchRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  detect_objects_in_image_api_v1_items_projects__project_id__detect_objects_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BoundingBoxDetectionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  generate_references_api_v1_reference_generation_projects__project_id__generate_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GeneratedReferenceResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_references_api_v1_reference_generation_projects__project_id__references_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GeneratedReferenceResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_batch_process_jobs_api_v1_batch_get: {
    parameters: {
      query?: {
        project_id?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BatchProcessJobListItem'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_batch_processing_stats_api_v1_batch_stats_get: {
    parameters: {
      query?: {
        project_id?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BatchProcessingStats'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_batch_processing_detail_api_v1_batch__job_id__detail_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        job_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BatchProcessingRecord'];
        };
      };
      /** @description Batch process job not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_batch_process_job_api_v1_batch__job_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        job_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BatchProcessJobOut'];
        };
      };
      /** @description Job not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_task_tags_api_v1_task_tags__get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskTagOut'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_task_tag_api_v1_task_tags__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskTagCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskTagOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_task_tag_api_v1_task_tags__tag_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tag_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskTagOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_task_tag_api_v1_task_tags__tag_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tag_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskTagUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TaskTagOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_task_tag_api_v1_task_tags__tag_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        tag_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_review_sets_api_v1_review_sets__get: {
    parameters: {
      query: {
        project_id: string;
      };
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetOut'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_review_set_api_v1_review_sets__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewSetCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_review_set_api_v1_review_sets__review_set_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        review_set_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_review_set_api_v1_review_sets__review_set_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        review_set_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewSetUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_review_set_api_v1_review_sets__review_set_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        review_set_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_review_set_character_association_api_v1_review_set_character_associations__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewSetCharacterAssociationCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetCharacterAssociationOut'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_review_set_character_association_api_v1_review_set_character_associations_review_set__review_set_id__character__character_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        review_set_id: string;
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetCharacterAssociationWithDetails'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_review_set_character_association_api_v1_review_set_character_associations_review_set__review_set_id__character__character_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        review_set_id: string;
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_review_set_character_associations_by_review_set_api_v1_review_set_character_associations_review_set__review_set_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        review_set_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetCharacterAssociationWithDetails'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_review_set_character_associations_by_character_api_v1_review_set_character_associations_character__character_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        character_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReviewSetCharacterAssociationWithDetails'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  analyze_video_scenes_api_v1_video_scenes_analyze_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_analyze_video_scenes_api_v1_video_scenes_analyze_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VideoScenesResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_scene_frames_api_v1_video_scenes__scene_number__frames_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        scene_number: number;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_get_scene_frames_api_v1_video_scenes__scene_number__frames_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SceneFrameResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_scene_frames_with_info_api_v1_video_scenes__scene_number__frames_with_info_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        scene_number: number;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_get_scene_frames_with_info_api_v1_video_scenes__scene_number__frames_with_info_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SceneFramesWithInfoResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  extract_pdf_preview_api_v1_pdf_extract_preview_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_extract_pdf_preview_api_v1_pdf_extract_preview_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PDFExtractionPreviewResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  confirm_pdf_extraction_api_v1_pdf_confirm_extraction__session_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmExtractionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ConfirmExtractionResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cleanup_pdf_session_api_v1_pdf_sessions__session_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_project_pdfs_api_v1_pdf_projects__project_id__pdfs_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PDFResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_pdf_details_api_v1_pdf_pdfs__pdf_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pdf_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PDFResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_pdf_extracted_items_api_v1_pdf_pdfs__pdf_id__items_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        pdf_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_subtask_drawing_api_v1_drawing_subtasks__subtask_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DrawingResponse'] | null;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  save_subtask_drawing_api_v1_drawing_subtasks__subtask_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DrawingData'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DrawingResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_subtask_drawing_api_v1_drawing_subtasks__subtask_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        subtask_id: string;
      };
      cookie?: {
        access_token?: string | null;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
